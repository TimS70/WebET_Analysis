)
summary(data_trial %>%
dplyr::select(run_id, offset, precision, fps)
)
trialFPS = data_et %>%
group_by(run_id, trial_index) %>%
summarise(n = n())
trialFPS = merge(
trialFPS,
data_trial %>%
dplyr::select(run_id, trial_index, trial_duration_exact),
by=c('run_id', 'trial_index'))
trialFPS$fps = 1000 * trialFPS$n / trialFPS$trial_duration_exact
if ('fps_fix' %in% names(data_subject))
{data_subject = data_subject %>% select(!fps_fix)}
data_subject = merge(
data_subject,
trialFPS %>% group_by(run_id) %>% summarise(fps_fix = mean(fps)),
by='run_id'
)
summary(data_subject$fps_fix)
data_subject %>%
dplyr::select(run_id, triedChin, keptHead, fps_fix) %>%
filter(
triedChin==0 |
keptHead==0 |
fps_fix<3)
subjects_lowFPS = data_subject %>%
dplyr::select(run_id, triedChin, keptHead, fps_fix) %>%
filter(fps_fix<3) %>%
dplyr::pull(run_id)
print(paste(
'N Subjects with low FPS: ',
length(subjects_lowFPS)))
print(subjects_lowFPS)
subjects_noInstruction = data_subject %>%
dplyr::select(run_id, triedChin, keptHead, fps_fix) %>%
filter(triedChin==0 | keptHead==0) %>%
dplyr::pull(run_id)
print(paste(
'N Subjects who did not follow the instructions: ',
length(subjects_noInstruction)))
print(subjects_noInstruction)
high_t_task = data_et %>%
filter(t_task>5500) %>%
group_by(run_id, trial_index) %>%
summarise(t_task_max = max(t_task))
merge_by_index = function(data, data_source, varName) {
if ('trial_duration_exact' %in% names(high_t_task)) {
data = data %>% dplyr::select(!varName)
}
data = merge(
data,
data_source %>%
dplyr::select(run_id, trial_index, varName),
by=c('run_id', 'trial_index'))
return(data)
}
high_t_task = high_t_task %>%
merge_by_index(data_trial, 'trial_duration_exact')
unique(high_t_task$run_id)
high_t_task
# Number of trials per subject
ans = as.data.table(
data_trial %>%
dplyr::select(run_id, trial_index, chin, withinTaskIndex)
)[, count := uniqueN(trial_index), by = run_id]
ans %>%
filter(count!=18)
data_subject %>%
dplyr::select(run_id, glasses_binary) %>%
filter(is.na(glasses_binary))
subjects_NA_glasses = data_subject %>%
dplyr::select(run_id, glasses_binary) %>%
filter(is.na(glasses_binary)) %>%
dplyr::pull(run_id)
excludedSubjects = c(
1, 70, 80, 97, 131, 2012,
subjects_lowFPS,
subjects_noInstruction,
subjects_NA_glasses) %>%
sort() %>%
unique()
print(paste(
'N Excluded subjects: ',
length(excludedSubjects)))
print(excludedSubjects)
generalCleaning = function(data) {
data_name = deparse(substitute(data))
print(data_name)
print(paste('Raw: ', nrow(data)))
data = data %>%
filter(!(run_id %in% excludedSubjects))
print(paste('Cleaned: ', nrow(data)))
return(data)
}
data_trial = generalCleaning(data_trial)
data_subject = generalCleaning(data_subject)
print(paste('Raw: ', nrow(data_trial)))
data_trial = data_trial %>%
filter(
!is.na(precision) &
(trial_duration_exact<5100)
)
print(paste('Cleaned: ', nrow(data_trial)))
print(paste('Raw: ', nrow(data_et)))
data_et = data_et %>% filter((t_task<5100))
print(paste('Cleaned: ', nrow(data_et)))
predictors = c('withinTaskIndex',
'x_pos', 'y_pos', 'fps',
'glasses_binary', 'chin')
ggpairs(data_trial[, append(predictors, c('precision', 'offset'))],
progress=F) # Correlations
lm_null = lm(offset ~ 1, data = data_trial %>% filter(!is.na(offset)))
summary(lm_null)
lme0_io = lme(
offset ~ 1,
data=data_trial,
method='ML',
na.action='na.omit',
random = ~1 | run_id
)
summary(lme0_io)
ICCest(factor(data_trial$run_id), data_trial$offset, alpha=.05, CI.type="THD")
data_trial = data_trial %>%
mutate(
y_pos_c = scale(y_pos),
x_pos_c = scale(x_pos),
fps_c = scale(fps))
lme1_control = lme(
offset ~ x_pos_c + y_pos_c + withinTaskIndex + fps_c,
data=data_trial,
method='ML',
na.action='na.omit',
random = ~1 | run_id
)
summary(lme1_control)
anova(lme0_io, lme1_control)
data_trial = data_trial %>%
mutate(
y_pos_c = scale(y_pos),
x_pos_c = scale(x_pos),
fps_c = scale(fps))
lme1_control = lme(
offset ~  withinTaskIndex + x_pos_c + y_pos_c + fps_c,
data=data_trial,
method='ML',
na.action='na.omit',
random = ~1 | run_id
)
summary(lme1_control)
anova(lme0_io, lme1_control)
lme2_control = lme(
offset ~ y_pos_c,
data=data_trial,
method='ML',
na.action='na.omit',
random = ~1 | run_id
)
summary(lme2_control)
anova(lme0_io, lme2_control)
lme3_experimental = lme(
offset ~ y_pos_c + glasses_binary + chin,
data=data_trial,
method='ML',
na.action='na.omit',
random = ~1 | run_id
)
summary(lme3_experimental)
anova(lme0_io, lme3_experimental)
lme4_experimental = lme(
offset ~ y_pos_c + chin,
data=data_trial,
method='ML',
na.action='na.omit',
random = ~1 | run_id
)
summary(lme4_experimental)
lme5_rs = lme(
offset ~ y_pos_c + chin,
data=data_trial,
method='ML',
na.action='na.omit',
random = ~ chin | run_id,
control = lmeControl(msMaxIter = 200) # Get sure it converges
)
summary(lme5_rs)
anova(lme4_experimental, lme5_rs)
lme_yPos_top = lme(
offset ~ chin + glasses_binary,
data=data_trial %>% filter(y_pos==0.2),
method='ML',
na.action='na.omit',
random = ~ chin | run_id,
control = lmeControl(msMaxIter = 200) # Get sure it converges
)
summary(lme_yPos_top)
lme0_io = lmer(
offset ~ 1,
data=data_trial,
method='ML',
na.action='na.omit',
random = ~1 | run_id
)
?lmer
?refit
lme0_io = lmer(
offset ~ 1 + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lme0_io)
ICCest(factor(data_trial$run_id), data_trial$offset, alpha=.05, CI.type="THD")
lme0_io = lmer(
offset ~ 1 + (1 | run_id),
data=data_trial,
REML=FALSE, refit=TRUE)
data_trial = data_trial %>%
mutate(
y_pos_c = scale(y_pos),
x_pos_c = scale(x_pos),
fps_c = scale(fps))
lme1_control = lmer(
offset ~  withinTaskIndex + x_pos_c + y_pos_c + fps_c + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lme1_control)
anova(lme0_io, lme1_control)
lme2_control = lmer(
offset ~ y_pos_c + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lme2_control)
anova(lme0_io, lme2_control)
lme3_experimental = lme(
offset ~ y_pos_c + glasses_binary + chin + (1 | run_id),
data=data_trial,
REML=FALSE)
lme3_experimental = lmer(
offset ~ y_pos_c + glasses_binary + chin + (1 | run_id),
data=data_trial,
REML=FALSE)
lme3_experimental = lmer(
offset ~ y_pos_c + glasses_binary + chin + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lme3_experimental)
anova(lme0_io, lme3_experimental)
lme4_experimental = lmet(
offset ~ y_pos_c + chin + (1 | run_id),
data=data_trial,
REML=FALSE)
lme4_experimental = lmeR(
offset ~ y_pos_c + chin + (1 | run_id),
data=data_trial,
REML=FALSE)
lme4_experimental = lmer(
offset ~ y_pos_c + chin + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lme4_experimental)
lme5_rs = lmer(
offset ~ y_pos_c + chin + (chin | run_id),
data=data_trial,
REML=FALSE)
summary(lme5_rs)
anova(lme4_experimental, lme5_rs)
lme_yPos_top = lmer(
offset ~ chin + glasses_binary + (chin | run_id),
data=data_trial %>% filter(y_pos==0.2),
REML=FALSE)
summary(lme_yPos_top)
ranef(lme5_rs)
plot(resid(lme5_rs), offset)
resid(lme5_rs)
length(resid(lme5_rs))
length(offset)
length(data_trial$offset)
length(resid(lme5_rs))
plot(resid(lme5_rs), data_trial$offset)
predictors
data_plot = data_trial %>%
mutate(predict_offset = predict(lme5_rs, type = "response")) %>%
dplyr::select(c(predict_offset, predictors)) %>%
gather(key = "predictors", value = "predictor_value", predict_offset)
setwd("C:/Users/User/GitHub/WebET_Analysis")
getPackages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
getPackages(c(
'boot',
'broom',
'car',
'compiler',
'data.table',
'DHARMa',
"dplyr",
'GGally',
'ggplot2',
'HLMdiag',
'Hmisc',
'influence.ME',
"ICC",
"knitr",
'lme4',
'lattice',
'lme4',
"lmerTest", # Erhalte p-Werte
'nlme',
'parallel',
'readr',
'reshape',
'reshape2',
"rsq",
'tidyverse',
"tinytex"))
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) # Show R markdown output as Integers
data_plot = data_trial %>%
mutate(predict_offset = predict(lme5_rs, type = "response")) %>%
dplyr::select(c(predict_offset, predictors)) %>%
gather(key = "predictors", value = "predictor_value", predict_offset)
data_plot
ggplot(data_plot, aes(logit, predictor_value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
ggplot(data_plot, aes(predict_offset, predictor_value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
predictors
plot(resid(lme5_rs), data_trial$offset)
plot(resid(lme4_rs), data_trial$offset)
plot(resid(lme4_experimental), data_trial$offset)
data_trial$residuals = residuals(lme5_rs)
data_trial = data_trial %>%
mutate(
res = residuals(lme5_rs),
res_sq = (abs(res)^2))
levene_model <- lm(res_sq ~ run_id, data=data_trial)
anova(levene_model)
data_trial = data_trial %>%
mutate(
res = residuals(lme5_rs),
res_sq = (abs(res)^2))
levene_model <- lm(res_sq ~ run_id, data=data_trial)
anova(levene_model)
plot(lme5_rs)
screen = lme(offset ~ chin,
data = data_trial,
method = 'ML',
na.action = "na.omit",
random = ~ chin | run_id,
control = lmeControl(msMaxIter = 200))
standardized = as.data.frame(scale(screen$residuals))
standardized = standardized$fixed
fitted = scale(fitted.values(screen))
qqnorm(standardized)
abline(0, 1)
qqmath(lme5_rs, id=0.05)
hist(standardized)
correlation = cor(
data_trial %>%
select(predictors),
use = 'pairwise.complete.obs'
)
symnum(correlation)
correlation
car::vif(lme5_rs)
correlation = cor(
data_trial %>%
select(predictors),
use = 'pairwise.complete.obs'
)
symnum(correlation)
correlation
car::vif(lme5_rs)
data_trial = data_trial %>%
mutate(offset_log = log10(offset+1))
lme7_rs_log = lmer(
offset_log ~ y_pos_c + chin + (chin | run_id),
data=data_trial,
REML=FALSE)
summary(lme7_rs_log)
ranef(lme7_rs_log)
qqmath(lme7_rs_log, id=0.05)
?qqmath
qqmath(lme7_rs_log, id=0.05, main='HEllo')
qqmath(lme7_rs_log, id=0.05, main='log transformed offset')
data_trial = data_trial %>%
mutate(
offset_log = log(offset+1),
offset_log10 = log10(offset+1),
offset_sqrt = sqrt(offset),
)
lmer_log = lmer(
offset_log ~ y_pos_c + chin + (chin | run_id),
data=data_trial,
REML=FALSE)
summary(lmer_log)
ranef(lmer_log)
qqmath(lmer_log, id=0.05, main='log transformed offset')
lmer_log10 = lmer(
offset_log10 ~ y_pos_c + chin + (chin | run_id),
data=data_trial,
REML=FALSE)
summary(lmer_log10)
ranef(lmer_log10)
qqmath(lmer_log10, id=0.05, main='log10 transformed offset')
lmer_sqrt = lmer(
offset_sqrt ~ y_pos_c + chin + (chin | run_id),
data=data_trial,
REML=FALSE)
summary(lmer_sqrt)
ranef(lmer_sqrt)
qqmath(lmer_sqrt, id=0.05, main='sqrt transformed offset')
data_trial = data_trial %>%
mutate(
res = residuals(lmer_sqrt),
res_sq = (abs(res)^2))
levene_model <- lm(res_sq ~ run_id, data=data_trial)
anova(levene_model)
plot(lmer_sqrt)
?case_delete
lmer_del <- case_delete(lme5_rs, level = "run_id", type = "both")
lmer_del
m0 <- lmer(offest ~ y_pos_c + (1 | run_id),
data=data_trial,
REML=FALSE)
m0 <- lmer(offset ~ y_pos_c + (1 | run_id),
data=data_trial,
REML=FALSE)
m1 <- lmer(offset ~ y_pos_c + chin + (1 | run_id),
data=data_trial,
REML=FALSE)
L1_m0 <- sigma(m0)^2 # L1-Residualvarianz RIO Modell
L1_m1 <- sigma(m1)^2 # L1-Residualvarianz RI Modell
print(paste(
'Pseudo R^2, reduction of L1 variance due to chin: (L1_m0 - L1_m1)/L1_m0 = ',
(L1_m0 - L1_m1)/L1_m0
))
print(paste(
'Pseudo R^2, \n
reduction of L1 variance due to chin: (L1_m0 - L1_m1)/L1_m0 = ',
(L1_m0 - L1_m1)/L1_m0
))
print(paste(
'Pseudo R^2,
\nreduction of L1 variance due to chin: (L1_m0 - L1_m1)/L1_m0 = ',
(L1_m0 - L1_m1)/L1_m0
))
print(paste(
'reduction of L1 variance due to chin: (L1_m0 - L1_m1)/L1_m0 = ',
(L1_m0 - L1_m1)/L1_m0
))
print(paste(
'Reduction of L1 variance due to chin: ',
(L1_m0 - L1_m1)/L1_m0
))
L2_m0 <- unlist(summary(m0)$var) # Interceptvarianz RI Modell
L2_m1 <- unlist(summary(m1)$var) # Interceptvarianz IAO Modell
(L2_m0 - L2_m1)/L2_m0
print(paste(
'Reduction of L2 variance due to chin: ',
(L2_m0 - L2_m1)/L2_m0
))
m0 <- lmer(offset ~ y_pos_c + (1 | run_id),
data=data_trial,
REML=FALSE)
m1 <- lmer(offset ~ y_pos_c + chin + (1 | run_id),
data=data_trial,
REML=FALSE)
L1_m0 <- sigma(m0)^2 # L1-Residualvarianz RIO Modell
L1_m1 <- sigma(m1)^2 # L1-Residualvarianz RI Modell
print('Pseudo R^2')
print(paste(
'Reduction of L1 variance due to chin: ',
(L1_m0 - L1_m1)/L1_m0
))
L2_m0 <- unlist(summary(m0)$var) # Interceptvarianz RI Modell
L2_m1 <- unlist(summary(m1)$var) # Interceptvarianz IAO Modell
print(paste(
'Reduction of L2 variance due to chin: ',
(L2_m0 - L2_m1)/L2_m0
))
# Get average
grouped = data_trial %>%
group_by(run_id) %>%
summarise(fps_subject = mean(fps))
data_trial = merge_by_subject(data_trial, grouped, 'fps_subject')
aggregate(fps ~ run_id, data = data_trial, mean)
# Get average
grouped = data_trial %>%
aggregate(fps ~ run_id, mean)
# Get average
grouped = data_trial %>%
group_by(run_id) %>%
summarise(fps_subject = mean(fps))
grouped
data_trial = data_trial %>%
merge_by_subject(grouped, 'fps_subject') %>%
mutate(fps_subject_c = fps - mean(grouped$fps_subject))
lme6_iao = lmer(
offset ~ y_pos_c + chin + fps_subject_c + (chin | run_id),
data=data_trial,
REML=FALSE)
summary(lme6_iao)
