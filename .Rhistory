ggsave('plots/ET_indices_OI_AI.pdf',width=5.7, height=5)
data_test = data_subject %>%
filter(!run_id %in% c(subjects_NA_OI, subjects_NA_AI))
cor.test(data_test$optionIndex, data_test$attributeIndex)
ggplot(data_subject %>%
filter(!run_id %in% c(subjects_NA_OI, subjects_NA_PI)),
aes(x=optionIndex, y=payneIndex)) +
geom_point(size=2.5, aes(alpha=.5))+
guides(alpha=FALSE,color=FALSE, shape=FALSE)+
theme_bw() +
xlim(-1,1) +
scale_colour_grey()
theme(text=element_text(size=20))+
xlab("Option Index") + ylab("Payne Index")
ggsave("plots/ET_indices_OI_PI.pdf",width=5.7, height=5)
data_test = data_subject %>%
filter(!run_id %in% c(subjects_NA_OI, subjects_NA_PI))
cor.test(data_test$optionIndex, data_test$payneIndex)
#Plot correlation between Payne index and discount rate
#Replication sample
ggplot(data_subject %>%
filter(!run_id %in% c(subjects_NA_PI, subjects_NA_AI)),
aes(x=attributeIndex, y=payneIndex)) +
geom_point(size=2.5, aes(alpha=.5))+
guides(alpha=FALSE,color=FALSE, shape=FALSE)+
theme_bw() +
xlim(-1,1) +
scale_colour_grey() +
theme(text=element_text(size=20))+
xlab("Attribute index") +
ylab("Payne Index")
ggsave("plots/ET_indices_AI_PI.pdf",width=5.7, height=5)
data_test = data_subject %>%
filter(!run_id %in% c(subjects_NA_PI, subjects_NA_AI))
cor.test(data_test$attributeIndex, data_test$payneIndex)
plot_trial_bins = function(data, nBins, title) {
data = data %>%
mutate(trial_bin = cut(withinTaskIndex, nBins, include.lowest=TRUE, labels=c(1:nBins)))
grouped_choseLL = data %>%
group_by(run_id, trial_bin) %>%
summarise(choseLL = mean(choseLL))
grouped_trialMeans = data %>%
group_by(trial_bin) %>%
summarise(trialMeans = mean(withinTaskIndex))
trial_bins = merge(grouped_choseLL, grouped_trialMeans, by='trial_bin')
trial_bins
ggplot(
data=trial_bins,
aes(x=trialMeans, y=choseLL)) +
theme_bw() +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(0, 80) +
geom_line(stat="summary", fun="mean", size=.5)+
stat_summary(fun.data=mean_se, geom="errorbar", width=.8)+
xlab("Trial_index") +
ylab("Proportion LL choices") +
ggtitle(title) +
theme(text=element_text(size=20))+ylim(0,1)
}
plot_trial_bins(data_trial, 8, "ChoseLL across trials")
createTimeBins = function(data, nBins) {
data$timeBin = 0
progress_bar <- progress_estimated(length(unique(data$run_id)), 0)
for (subject in unique(data$run_id)){
df_subject = data %>% filter(run_id == subject)
for (trial in unique(df_subject$withinTaskIndex)) {
df_trial = df_subject %>% filter(withinTaskIndex == trial)
this_timeBin = cut(
df_trial$t_task, nBins,
labels = c(1:nBins),
include.lowest=TRUE)
data = data %>%
mutate(timeBin=replace(
timeBin,
run_id==subject & withinTaskIndex==trial,
this_timeBin))
}
progress_bar$pause(0.1)$tick()$print()
}
return(data)
}
data_et = createTimeBins(data_et, 5)
data_et %>%
dplyr::select(run_id, withinTaskIndex, timeBin, t_task, aoi) %>%
arrange(run_id, withinTaskIndex, timeBin, t_task)
subjects_highFPS = data_subject %>%
filter(fps>10) %>%
arrange(run_id) %>%
dplyr::pull(run_id)
timeBins_choseTB_long <- data_et %>%
filter(!is.na(aoi) & aoi!=0 &
run_id %in% subjects_highFPS) %>%
mutate(
lookTop = as.numeric(aoi %in% c('TL', 'TR')),
lookBottom = as.numeric(aoi %in% c('BL', 'BR'))) %>%
dplyr::group_by(run_id, choseTop, timeBin) %>%
dplyr::summarise(
n = n(),
n_lookTop = sum(lookTop),
n_lookBottom = sum(lookBottom),
p_lookTop = sum(lookTop)/n,
p_lookBottom = sum(lookBottom)/n) %>%
arrange(choseTop)
timeBins_choseTB_long
timeBins_choseTB_long %>%
group_by(run_id, choseTop) %>%
summarise(n=length(unique(timeBin))) %>%
filter(n<5)
subjects_not_enough_bins = timeBins_choseTB_long %>%
group_by(run_id, choseTop) %>%
summarise(n=length(unique(timeBin))) %>%
filter(n<5) %>%
dplyr::pull(run_id)
timeBins_choseTB_long %>%
filter(timeBin %in% c(4, 5)) %>%
dplyr::group_by(timeBin, choseTop) %>%
dplyr::summarise(p_lookTop = mean(p_lookTop))
#Violin plot of time bins
timeBins_choseTB_long$choseTop = as.factor(timeBins_choseTB_long$choseTop)
for (bin in unique(timeBins_choseTB_long$timeBin)) {
print(t.test(p_lookTop ~ choseTop,
data=timeBins_choseTB_long %>%
filter(timeBin==bin &
!(run_id %in% subjects_not_enough_bins)),
paired=TRUE))
}
plot_aoi_across_time = function(
data, yVar, title='AOI across timeBins') {
plot = ggplot(
data,
aes(x=factor(timeBin), y=yVar, fill=factor(choseTop, c('1', '0')))) +
geom_split_violin(alpha=.7, size=1, position="dodge") +
stat_summary(
fun=mean, geom="point",
shape=45,size=10,
position=position_dodge(.9),
aes(color=factor(choseTop, c('1', '0')))) +
theme_bw() +
theme(text=element_text(size=20),
legend.position="bottom") +
ggtitle(title) +
scale_colour_manual(
values=c("1"="black", "0"="white"),
name="",
labels=c("Chose Top", "Chose Bottom")) +
scale_fill_grey(
start=.3, end=.7, name="",
labels=c("Chose Top", "Chose Bottom")) +
# If significant
ylab(deparse(substitute(yVar))) +
xlab("Time bins")
print(plot)
}
timeBins_choseTB_long %>%
plot_aoi_across_time(timeBins_choseTB_long$p_lookTop, 'p_lookTop')
ggplot(timeBins_choseTB_long,
aes(x=factor(timeBin), y=p_lookTop, fill=factor(choseTop, c('1', '0')))) +
geom_split_violin(alpha=.7, size=1, position="dodge") +
stat_summary(
fun=mean, geom="point",
shape=45,size=10,
position=position_dodge(.9),
aes(color=factor(choseTop, c('1', '0')))) +
theme_bw() +
theme(text=element_text(size=20),
legend.position="bottom") +
ggtitle('Eye-tracking time bins') +
scale_colour_manual(
values=c("1"="black", "0"="white"),
name="",
labels=c("Chose Top", "Chose Bottom")) +
scale_fill_grey(
start=.3, end=.7, name="",
labels=c("Chose Top", "Chose Bottom")) +
# If significant
geom_text(x=5, y=1.03, label="***") +
annotate("segment",x=4.7, xend=5.3, y=1.02, yend=1.02) +
ylab("Proportion looking top") +
xlab("Time bins")
ggsave("plots/et_bins_tb.pdf",width=5.5, height=5)
create_eyeTracking_Bins = function(data, nBins) {
data$et_bin = 0
progress_bar <- progress_estimated(length(unique(data$run_id)), 0)
for (subject in unique(data$run_id)){
df_subject = data %>% filter(run_id == subject)
for (trial in unique(df_subject$withinTaskIndex)) {
df_trial = df_subject %>% filter(withinTaskIndex == trial)
this_et_bin = cut(
c(1:nrow(df_trial)),
nBins,
labels = c(1:nBins),
include.lowest=TRUE)
data = data %>%
mutate(et_bin=replace(
et_bin,
run_id==subject & withinTaskIndex==trial,
this_et_bin))
}
progress_bar$pause(0.1)$tick()$print()
}
return(data)
}
data_et = create_eyeTracking_Bins(data_et, 5)
data_et %>%
group_by(run_id, withinTaskIndex, et_bin) %>%
summarise(n=n())
data_et %>%
dplyr::select(run_id, withinTaskIndex, et_bin, t_task) %>%
arrange(run_id, withinTaskIndex, et_bin, t_task)
subjects_highFPS = data_subject %>%
filter(fps>10) %>%
arrange(run_id) %>%
dplyr::pull(run_id)
et_bins_choseTB_long = data_et %>%
filter(!is.na(aoi) & aoi!=0 &
run_id %in% subjects_highFPS) %>%
mutate(
lookTop = as.numeric(aoi %in% c('TL', 'TR')),
lookBottom = as.numeric(aoi %in% c('BL', 'BR'))) %>%
dplyr::group_by(run_id, choseTop, et_bin) %>%
dplyr::summarise(
n = n(),
n_lookTop = sum(lookTop),
n_lookBottom = sum(lookBottom),
p_lookTop = sum(lookTop)/n,
p_lookBottom = sum(lookBottom)/n) %>%
arrange(choseTop)
et_bins_choseTB_long
et_bins_choseTB_long %>%
group_by(run_id, choseTop) %>%
summarise(n=length(unique(et_bin))) %>%
filter(n<5)
subjects_not_enough_bins = et_bins_choseTB_long %>%
group_by(run_id, choseTop) %>%
summarise(n=length(unique(et_bin))) %>%
filter(n<5) %>%
dplyr::pull(run_id)
et_bins_choseTB_long %>%
filter(et_bin %in% c(4, 5)) %>%
dplyr::group_by(et_bin, choseTop) %>%
dplyr::summarise(p_lookTop = mean(p_lookTop))
#Violin plot of time bins
et_bins_choseTB_long$choseTop = as.factor(et_bins_choseTB_long$choseTop)
for (bin in unique(et_bins_choseTB_long$et_bin)) {
print(t.test(p_lookTop ~ choseTop,
data=et_bins_choseTB_long %>%
filter(et_bin==bin &
!(run_id %in% subjects_not_enough_bins)),
paired=TRUE))
}
plot_aoi_across_time = function(
data, yVar, title='AOI across et_bins') {
plot = ggplot(
data,
aes(x=factor(et_bin), y=yVar, fill=factor(choseTop, c('1', '0')))) +
geom_split_violin(alpha=.7, size=1, position="dodge") +
stat_summary(
fun=mean, geom="point",
shape=45,size=10,
position=position_dodge(.9),
aes(color=factor(choseTop, c('1', '0')))) +
theme_bw() +
theme(text=element_text(size=20),
legend.position="bottom") +
ggtitle(title) +
scale_colour_manual(
values=c("1"="black", "0"="white"),
name="",
labels=c("Chose Top", "Chose Bottom")) +
scale_fill_grey(
start=.3, end=.7, name="",
labels=c("Chose Top", "Chose Bottom")) +
# If significant
ylab(deparse(substitute(yVar))) +
xlab("Time bins")
print(plot)
}
et_bins_choseTB_long %>%
plot_aoi_across_time(et_bins_choseTB_long$p_lookTop, 'p_lookTop')
et_bins_choseTB_long %>%
plot_aoi_across_time(et_bins_choseTB_long$p_lookBottom, 'p_lookBottom')
et_bins_choseTB_long %>%
plot_aoi_across_time(et_bins_choseTB_long$p_nullAOI, 'p_nullAOI')
subjects_highFPS = data_subject %>%
filter(fps>10) %>%
arrange(run_id) %>%
dplyr::pull(run_id)
et_bins_choseTB_long = data_et %>%
filter(!is.na(aoi) & aoi!=0 &
run_id %in% subjects_highFPS) %>%
mutate(
lookTop = as.numeric(aoi %in% c('TL', 'TR')),
lookBottom = as.numeric(aoi %in% c('BL', 'BR'))) %>%
dplyr::group_by(run_id, choseTop, et_bin) %>%
dplyr::summarise(
n = n(),
n_lookTop = sum(lookTop),
n_lookBottom = sum(lookBottom),
p_lookTop = sum(lookTop)/n,
p_lookBottom = sum(lookBottom)/n) %>%
arrange(choseTop)
et_bins_choseTB_long
et_bins_choseTB_long %>%
group_by(run_id, choseTop) %>%
summarise(n=length(unique(et_bin))) %>%
filter(n<5)
subjects_not_enough_bins = et_bins_choseTB_long %>%
group_by(run_id, choseTop) %>%
summarise(n=length(unique(et_bin))) %>%
filter(n<5) %>%
dplyr::pull(run_id)
et_bins_choseTB_long %>%
filter(et_bin %in% c(4, 5)) %>%
dplyr::group_by(et_bin, choseTop) %>%
dplyr::summarise(p_lookTop = mean(p_lookTop))
#Violin plot of time bins
et_bins_choseTB_long$choseTop = as.factor(et_bins_choseTB_long$choseTop)
for (bin in unique(et_bins_choseTB_long$et_bin)) {
print(t.test(p_lookTop ~ choseTop,
data=et_bins_choseTB_long %>%
filter(et_bin==bin &
!(run_id %in% subjects_not_enough_bins)),
paired=TRUE))
}
plot_aoi_across_time = function(
data, yVar, title='AOI across et_bins') {
plot = ggplot(
data,
aes(x=factor(et_bin), y=yVar, fill=factor(choseTop, c('1', '0')))) +
geom_split_violin(alpha=.7, size=1, position="dodge") +
stat_summary(
fun=mean, geom="point",
shape=45,size=10,
position=position_dodge(.9),
aes(color=factor(choseTop, c('1', '0')))) +
theme_bw() +
theme(text=element_text(size=20),
legend.position="bottom") +
ggtitle(title) +
scale_colour_manual(
values=c("1"="black", "0"="white"),
name="",
labels=c("Chose Top", "Chose Bottom")) +
scale_fill_grey(
start=.3, end=.7, name="",
labels=c("Chose Top", "Chose Bottom")) +
# If significant
ylab(deparse(substitute(yVar))) +
xlab("Time bins")
print(plot)
}
et_bins_choseTB_long %>%
plot_aoi_across_time(et_bins_choseTB_long$p_lookTop, 'p_lookTop')
et_bins_choseTB_long %>%
plot_aoi_across_time(et_bins_choseTB_long$p_lookBottom, 'p_lookBottom')
if (use_adjusted_et_data) {
et_bins_choseTB_long %>%
plot_aoi_across_time(et_bins_choseTB_long$p_nullAOI, 'p_nullAOI')
}
subjects_highFPS = data_subject %>%
filter(fps>10) %>%
arrange(run_id) %>%
dplyr::pull(run_id)
et_bins_choseTB_long = data_et %>%
filter(!is.na(aoi) & aoi!=0 &
run_id %in% subjects_highFPS) %>%
mutate(
lookTop = as.numeric(aoi %in% c('TL', 'TR')),
lookBottom = as.numeric(aoi %in% c('BL', 'BR'))) %>%
dplyr::group_by(run_id, choseTop, et_bin) %>%
dplyr::summarise(
n = n(),
n_lookTop = sum(lookTop),
n_lookBottom = sum(lookBottom),
p_lookTop = sum(lookTop)/n,
p_lookBottom = sum(lookBottom)/n) %>%
arrange(choseTop)
et_bins_choseTB_long
et_bins_choseTB_long %>%
group_by(run_id, choseTop) %>%
summarise(n=length(unique(et_bin))) %>%
filter(n<5)
subjects_not_enough_bins = et_bins_choseTB_long %>%
group_by(run_id, choseTop) %>%
summarise(n=length(unique(et_bin))) %>%
filter(n<5) %>%
dplyr::pull(run_id)
et_bins_choseTB_long %>%
filter(et_bin %in% c(4, 5)) %>%
dplyr::group_by(et_bin, choseTop) %>%
dplyr::summarise(p_lookTop = mean(p_lookTop))
#Violin plot of time bins
et_bins_choseTB_long$choseTop = as.factor(et_bins_choseTB_long$choseTop)
for (bin in unique(et_bins_choseTB_long$et_bin)) {
print(t.test(p_lookTop ~ choseTop,
data=et_bins_choseTB_long %>%
filter(et_bin==bin &
!(run_id %in% subjects_not_enough_bins)),
paired=TRUE))
}
plot_aoi_across_time = function(
data, yVar, title='AOI across et_bins') {
plot = ggplot(
data,
aes(x=factor(et_bin), y=yVar, fill=factor(choseTop, c('1', '0')))) +
geom_split_violin(alpha=.7, size=1, position="dodge") +
stat_summary(
fun=mean, geom="point",
shape=45,size=10,
position=position_dodge(.9),
aes(color=factor(choseTop, c('1', '0')))) +
theme_bw() +
theme(text=element_text(size=20),
legend.position="bottom") +
ggtitle(title) +
scale_colour_manual(
values=c("1"="black", "0"="white"),
name="",
labels=c("Chose Top", "Chose Bottom")) +
scale_fill_grey(
start=.3, end=.7, name="",
labels=c("Chose Top", "Chose Bottom")) +
# If significant
ylab(deparse(substitute(yVar))) +
xlab("Time bins")
print(plot)
}
et_bins_choseTB_long %>%
plot_aoi_across_time(et_bins_choseTB_long$p_lookTop, 'p_lookTop')
et_bins_choseTB_long %>%
plot_aoi_across_time(et_bins_choseTB_long$p_lookBottom, 'p_lookBottom')
if (use_adjusted_et_data) {
et_bins_choseTB_long %>%
plot_aoi_across_time(et_bins_choseTB_long$p_nullAOI, 'p_nullAOI')
}
add_lastGazeTop = function(data_trial, data_et) {
grouped_lastCoordinate = data_et %>%
dplyr::group_by(run_id, trial_index) %>%
dplyr::summarise(
t_task = max(t_task)) %>%
merge(data_et %>%
dplyr::select(run_id, trial_index, t_task, aoi),
by=c('run_id', 'trial_index', 't_task')) %>%
mutate(lastGazeTop = as.numeric(aoi %in% c('TL', 'TR')))
grouped_lastCoordinate
if ('lastGazeTop' %in% names(data_trial)) {
data_trial = data_trial %>% dplyr::select(!lastGazeTop)}
data_trial = data_trial %>%
merge(
grouped_lastCoordinate %>%
dplyr::select(run_id, trial_index, lastGazeTop),
by=c('run_id', 'trial_index'))
return(data_trial)
}
data_trial = add_lastGazeTop(data_trial, data_et)
data_trial %>%
dplyr::select(run_id, trial_index, choseTop, lastGazeTop)
lastGaze_long <- data_trial %>%
dplyr::select(run_id, withinTaskIndex, lastGazeTop, choseTop) %>%
dplyr::group_by(run_id, lastGazeTop, withinTaskIndex) %>%
dplyr::summarise(choseTop=mean(choseTop)) %>%
dplyr::group_by(run_id, lastGazeTop) %>%
dplyr::summarise(
n=n(),
choseTop=mean(choseTop))
lastGaze_long
subjects_noGaze =
lastGaze_long %>%
group_by(run_id) %>%
dplyr::summarise(n_subj = n()) %>%
filter(n_subj<2) %>%
arrange(run_id) %>%
dplyr::pull(run_id)
lastGaze_long$lastGazeTop = factor(lastGaze_long$lastGazeTop, c('1', '0'))
t.test(
choseTop ~ lastGazeTop,
data=lastGaze_long %>% filter(!(run_id %in% subjects_noGaze)),
paired=TRUE)
ggplot(lastGaze_long, aes(x=lastGazeTop, y=choseTop)) +
geom_violin(fill="gray", size=0) +
stat_summary(fun=mean,geom="point",shape=45,size=10, color="white") +
geom_text(x=1.5, y=1.02, label="***") +
annotate("segment",x=1, xend=2, y=1.01, yend=1.01) +
theme_bw()+ylim(0,1.03)+xlab("") +
ylab("Proportion top choices") +
xlab("last Fixation on Top AOIs") +
theme(text=element_text(size=20))
ggsave("plots/lastGaze_vs_choice.pdf",width=5.5, height=5)
add_lastGazeLL = function(data_trial, data_et) {
grouped_lastCoordinate = data_et %>%
dplyr::group_by(run_id, trial_index) %>%
dplyr::summarise(
t_task = max(t_task)) %>%
merge(data_et %>%
dplyr::select(run_id, trial_index, t_task, aoi, LL_top) %>%
filter(aoi!="0"),
by=c('run_id', 'trial_index', 't_task')) %>%
mutate(lastGazeLL = as.numeric(
(aoi %in% c('TL', 'TR') & LL_top==1) |
(aoi %in% c('BL', 'BR') & LL_top==0)),
)
print(grouped_lastCoordinate)
if ('lastGazeTop' %in% names(data_trial)) {
data_trial = data_trial %>% dplyr::select(!lastGazeLL)}
data_trial = data_trial %>%
merge(
grouped_lastCoordinate %>%
dplyr::select(run_id, trial_index, lastGazeLL),
by=c('run_id', 'trial_index'))
return(data_trial)
}
data_trial = add_lastGazeLL(data_trial, data_et)
