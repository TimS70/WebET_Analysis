mutate(lastGazeLL = as.numeric(
(aoi %in% c('TL', 'TR') & LL_top==1) |
(aoi %in% c('BL', 'BR') & LL_top==0)),
) %>%
merge(data_trial %>%
dplyr::select(run_id, trial_index,
option_TL, option_TR, option_BR, option_BL,
choseLL),
by=c('run_id', 'trial_index'))
lastGaze_long <- data_trial %>%
dplyr::select(run_id, withinTaskIndex, lastGazeLL, choseLL) %>%
dplyr::group_by(run_id, lastGazeLL, withinTaskIndex) %>%
dplyr::summarise(choseLL=mean(choseLL)) %>%
dplyr::group_by(run_id, lastGazeLL) %>%
dplyr::summarise(
n=n(),
choseLL=mean(choseLL))
lastGaze_long
subjects_noGaze = lastGaze_long %>%
group_by(run_id) %>%
dplyr::summarise(n_subj = n()) %>%
filter(n_subj<2) %>%
arrange(run_id) %>%
dplyr::pull(run_id)
lastGaze_long$lastGazeLL = factor(lastGaze_long$lastGazeLL, c('1', '0'))
t.test(
choseLL ~ lastGazeLL,
data=lastGaze_long %>% filter(!(run_id %in% subjects_noGaze)),
paired=TRUE)
ggplot(lastGaze_long,
aes(x=lastGazeLL, y=choseLL)) +
geom_violin(fill="gray", size=0) +
stat_summary(fun=mean,geom="point",shape=45,size=10, color="white") +
geom_text(x=1.5, y=1.02, label="***") +
annotate("segment",x=1, xend=2, y=1.01, yend=1.01) +
theme_bw()+ylim(0,1.03)+xlab("") +
ylab("Proportion LL choices") +
xlab("last Fixation on LL AOIs") +
theme(text=element_text(size=20))
setwd("C:/Users/User/GitHub/WebET_Analysis")
getPackages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
getPackages(c('plyr',
'dplyr',
"effsize",
'e1071',
"ggplot2",
"ggsignif",
'knitrProgressBar',
'matlabr',
'progress',
'QuantPsyc',
"RColorBrewer",
'reshape2',
'tidyr')
)
# https://stackoverflow.com/a/45614547
GeomSplitViolin <- ggproto("GeomSplitViolin", GeomViolin, draw_group = function(self, data, ..., draw_quantiles = NULL){
data <- transform(data, xminv = x - violinwidth * (x - xmin), xmaxv = x + violinwidth * (xmax - x))
grp <- data[1,'group']
newdata <- plyr::arrange(transform(data, x = if(grp%%2==1) xminv else xmaxv), if(grp%%2==1) y else -y)
newdata <- rbind(newdata[1, ], newdata, newdata[nrow(newdata), ], newdata[1, ])
newdata[c(1,nrow(newdata)-1,nrow(newdata)), 'x'] <- round(newdata[1, 'x'])
if (length(draw_quantiles) > 0 & !scales::zero_range(range(data$y))) {
stopifnot(all(draw_quantiles >= 0), all(draw_quantiles <=
1))
quantiles <- ggplot2:::create_quantile_segment_frame(data, draw_quantiles)
aesthetics <- data[rep(1, nrow(quantiles)), setdiff(names(data), c("x", "y")), drop = FALSE]
aesthetics$alpha <- rep(1, nrow(quantiles))
both <- cbind(quantiles, aesthetics)
quantile_grob <- GeomPath$draw_panel(both, ...)
ggplot2:::ggname("geom_split_violin", grid::grobTree(GeomPolygon$draw_panel(newdata, ...), quantile_grob))
}
else {
ggplot2:::ggname("geom_split_violin", GeomPolygon$draw_panel(newdata, ...))
}
})
geom_split_violin <- function (mapping = NULL, data = NULL, stat = "ydensity", position = "identity", ..., draw_quantiles = NULL, trim = TRUE, scale = "area", na.rm = FALSE, show.legend = NA, inherit.aes = TRUE) {
layer(data = data, mapping = mapping, stat = stat, geom = GeomSplitViolin, position = position, show.legend = show.legend, inherit.aes = inherit.aes, params = list(trim = trim, scale = scale, draw_quantiles = draw_quantiles, na.rm = na.rm, ...))
}
data_subject <- read.table('data_jupyter/data_subject.csv',
header=TRUE, sep=',')
data_subject
data_trial <- read.table('data_jupyter/data_trial_choice.csv',
header=TRUE, sep=',')
data_trial
data_et <- read.table('data_jupyter/data_et_choice.csv',
header=TRUE, sep=',')
grouped = data_trial %>%
dplyr::group_by(run_id, trial_index) %>%
dplyr::summarise(choseTop = mean(choseTop))
if ('choseTop' %in% names(data_et))
{data_et = data_et %>% select(!choseTop)}
data_et = merge(data_et, grouped, by=c('run_id', 'trial_index'))
data_et
merge_mean_by_subject = function(data, data_source, varName) {
grouped = data_source %>%
dplyr::group_by(run_id) %>%
dplyr::summarise(varName = mean(varName))
if (varName %in% names(data)) {
data = data %>% dplyr::select(!varName)
}
data = merge(
data,
data_source %>% dplyr::select(run_id, varName),
by='run_id')
return(data)
}
#run_matlab_script('fitK/fit_discount_k.m')
logK <- read.table('fitK/logK.csv', header=TRUE, sep=',')
data_subject = merge_mean_by_subject(data_subject, logK, 'logK')
data_subject = merge_mean_by_subject(data_subject, logK, 'noise')
data_trial = merge_mean_by_subject(data_trial, logK, 'noise')
data_trial = merge_mean_by_subject(data_trial, logK, 'logK')
data_subject %>%
dplyr::select(run_id, logK, noise)
subjects_cannotSee = data_subject %>%
filter(sight == 'notCorrected' &
glasses == 'longSight') %>%
dplyr::pull(run_id)
print(paste(
'Subjects who are long-sighted but do not wear corrections: ',
subjects_cannotSee
))
ggplot(data_subject, aes(x=logK))+
geom_histogram(binwidth=.5, alpha=.5, position="identity")+
scale_fill_manual(values=c("palegreen","cornflowerblue"), name="") +
theme_bw()+theme(text=element_text(size=40))
ggsave("plots/logk_hist.pdf", width=5.5, height=5)
ggplot(data_subject, aes(x=noise))+
geom_histogram(binwidth=5, alpha=.5, position="identity")+
scale_fill_manual(values=c("palegreen","cornflowerblue"), name="") +
theme_bw()+theme(text=element_text(size=40))
ggsave("plots/logk_hist.pdf", width=5.5, height=5)
ggplot(data_subject, aes(x=logK, y=noise)) +
geom_point(size=2.5, aes(alpha=.5))+
guides(alpha=FALSE,color=FALSE, shape=FALSE)+
theme_bw() +
scale_colour_grey() +
theme(text=element_text(size=20)) +
xlab("logK") + ylab("noise") +
ggtitle('logK vs. noise')
ggplot(data_subject %>% filter(noise < 500), aes(x=logK, y=noise)) +
geom_point(size=2.5, aes(alpha=.5))+
guides(alpha=FALSE,color=FALSE, shape=FALSE)+
theme_bw() +
scale_colour_grey() +
theme(text=element_text(size=20)) +
xlab("logK") + ylab("noise") +
ggtitle('logK vs. noise')
subjects_biasedChoices = data_subject %>%
filter(
choseLL>0.98 | choseLL<0.02 |
choseTop>0.98 | choseTop<0.02
) %>%
arrange(run_id) %>%
dplyr::pull(run_id)
subjects_biasedChoices
subjects_missingLogK = data_subject %>%
filter(is.na(logK)) %>%
arrange(run_id) %>%
dplyr::pull(run_id)
subjects_missingLogK
subjects_noisy_logK = data_subject %>%
filter(noise>40) %>%
arrange(run_id) %>%
dplyr::pull(run_id)
subjects_noisy_logK
subjects_pos_logK = data_subject %>%
filter(logK>0) %>%
arrange(run_id) %>%
dplyr::pull(run_id)
subjects_pos_logK
grouped_NA_ET = data_trial %>%
filter(!is.na(fps)) %>%
group_by(run_id) %>%
dplyr::summarise(fps = mean(fps),
n_NA_OI = sum(is.na(optionIndex)),
n_NA_AI = sum(is.na(attributeIndex)),
n_NA_PI = sum(is.na(payneIndex))) %>%
arrange(n_NA_OI, n_NA_AI, n_NA_PI)
grouped_NA_ET
subjects_NA_OI = grouped_NA_ET %>%
filter(n_NA_OI>40) %>%
dplyr::pull(run_id)
subjects_NA_AI = grouped_NA_ET %>%
filter(n_NA_AI>40) %>%
dplyr::pull(run_id)
subjects_NA_PI = grouped_NA_ET %>%
filter(n_NA_PI>40) %>%
dplyr::pull(run_id)
excludeSubjects <- read.table('data_jupyter/excludeSubjects_choice.csv',
header=TRUE, sep=',')[, 1]
excludeSubjects = c(
excludeSubjects,
subjects_biasedChoices,
subjects_pos_logK,
subjects_noisy_logK,
subjects_missingLogK,
subjects_cannotSee
)
excludeSubjects
generalCleaninng = function(data) {
data = data %>%
filter(
run_id < 1000 &
!(run_id %in% excludeSubjects)
)
}
data_subject = generalCleaninng(data_subject)
data_trial = generalCleaninng(data_trial)
data_et = generalCleaninng(data_et)
print(paste('Number of subjects: ', length(unique(data_trial$run_id))))
aoi_width = 0.3
x_L = 0.05 + 0.9*0.2
x_R = 0.05 + 0.9*0.8
y_T = 0.25
y_B = 0.75
data_et = data_et %>%
mutate(aoi="0") %>%
mutate(aoi=replace(
aoi,
(x<x_L + aoi_width/2 & x>x_L - aoi_width/2 &
y<y_T + aoi_width/2 & y>y_T - aoi_width/2),
'TL')) %>%
mutate(aoi=replace(
aoi,
(x<x_R + aoi_width/2 & x>x_R - aoi_width/2 &
y<y_T + aoi_width/2 & y>y_T - aoi_width/2),
'TR')) %>%
mutate(aoi=replace(
aoi,
(x<x_L + aoi_width/2 & x>x_L - aoi_width/2 &
y<y_B + aoi_width/2 & y>y_B - aoi_width/2),
'BL')) %>%
mutate(aoi=replace(
aoi,
(x<x_R + aoi_width/2 & x>x_R - aoi_width/2 &
y<y_B + aoi_width/2 & y>y_B - aoi_width/2),
'BR'))
data_et = data_et %>%
filter(aoi!='0')
x = data_et$x
y = data_et$y
plot(x, y, xlim=c(0, 1), ylim=c(1, 0))
#Replication sample
ggplot(data_subject, aes(x=choseTop))+
geom_histogram(bins=15)+theme_bw()+xlab("Proportion Top Choices")+
theme(text=element_text(size=20))+xlim(0,1)
ggsave("plots/choiceSide.pdf",width=5.5, height=5)
ggplot(data_subject, aes(x=logK))+
geom_histogram(binwidth=.5, alpha=.5, position="identity")+
scale_fill_manual(values=c("palegreen","cornflowerblue"), name="") +
theme_bw()+theme(text=element_text(size=40))
ggsave("plots/logk_hist.pdf", width=5.5, height=5)
subjectiveValues = function(data) {
data$svLL = data$aLL / (1 + exp(data$logK) * data$tLL)
data$svSS = data$aSS / (1 + exp(data$logK) * data$tSS)
data$dSV_LLSS = data$svLL - data$svSS
data$svT = data$aT / (1+ exp(data$logK) * data$tT)
data$svB = data$aB / (1+ exp(data$logK) * data$tB)
data$dSV_TB = data$svT - data$svB
return(data)
}
data_trial = merge_mean_by_subject(data_trial, data_subject, 'logK')
data_trial = merge_mean_by_subject(data_trial, logK, 'noise')
data_trial = subjectiveValues(data_trial)
data_trial %>%
dplyr::select(run_id, aT, tT, svT, aB, tB, svB, dSV_TB, choseTop) %>%
mutate(across(c('svT', 'svB', 'dSV_TB'), round, 2)) %>%
arrange(dSV_TB)
data_trial$dSV_bin =
cut(data_trial$dSV_TB,
breaks = seq(-5, 5, 1),
labels = seq(-4.5, 4.5, 1),
include.lowest=TRUE) %>%
paste() %>%
as.numeric()
SV_bins = data_trial %>%
dplyr::group_by(run_id, dSV_bin) %>%
dplyr::summarise(
n=n(),
logK = mean(logK),
noise = mean(noise),
choseTop=mean(choseTop),
rt=mean(trial_duration_exact)/1000,
count=mean(x_count)) %>%
filter(n>2) %>%
arrange(dSV_bin)
SV_bins
print(
paste(
'Remaining subjects: ',
SV_bins %>%
dplyr::pull(run_id) %>%
unique() %>%
length()
)
)
ggplot(data=SV_bins, aes(x=dSV_bin, y=choseTop)) +
theme_bw() +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) +
geom_line(stat="summary", fun="mean", size=.5)+
stat_summary(fun.data=mean_se, geom="errorbar", width=.8)+
xlab("SV top - SV bottom")+ylab("Proportion top choices")+
theme(text=element_text(size=20))+ylim(0,1)
ggsave("plots/SV_choseTop.pdf", width=5.5, height=5)
ggplot(data=SV_bins, aes(x=dSV_bin, y=rt)) +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) + ylim(0, 6.5) +
geom_line(stat="summary", fun.y="mean", size=.5) +
stat_summary(fun.data=mean_se, geom="errorbar", width=.8) +
xlab("SV top - SV bottom") +
ylab("Response Time (s)") +
theme(text=element_text(size=20))
ggsave("plots/SV_RT.pdf",width=5.5, height=5)
ggplot(data=SV_bins, aes(x=dSV_bin, y=count)) +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) + ylim(0,20) +
geom_line(stat="summary", fun.y="mean", size=.5) +
stat_summary(fun.data=mean_se, geom="errorbar", width=.8) +
xlab("SV top - SV bottom") +
ylab("Number of Fixations") +
theme(text=element_text(size=20))
ggsave("plots/SV_Count.pdf",width=5.5, height=5)
(dSV_bin < -4)
SV_bins %>%
filter(dSV_bin < -4)
data_trial$dSV_bin =
cut(data_trial$dSV_TB,
breaks = seq(-5, 5, 1),
labels = seq(-4.5, 4.5, 1),
include.lowest=TRUE) %>%
paste() %>%
as.numeric()
SV_bins = data_trial %>%
dplyr::group_by(run_id, dSV_bin) %>%
dplyr::summarise(
n=n(),
logK = mean(logK),
noise = mean(noise),
choseTop=mean(choseTop),
rt=mean(trial_duration_exact)/1000,
count=mean(x_count)) %>%
filter(n>1) %>%
arrange(dSV_bin)
SV_bins
print(
paste(
'Remaining subjects: ',
SV_bins %>%
dplyr::pull(run_id) %>%
unique() %>%
length()
)
)
ggplot(data=SV_bins, aes(x=dSV_bin, y=choseTop)) +
theme_bw() +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) +
geom_line(stat="summary", fun="mean", size=.5)+
stat_summary(fun.data=mean_se, geom="errorbar", width=.8)+
xlab("SV top - SV bottom")+ylab("Proportion top choices")+
theme(text=element_text(size=20))+ylim(0,1)
ggsave("plots/SV_choseTop.pdf", width=5.5, height=5)
ggplot(data=SV_bins, aes(x=dSV_bin, y=rt)) +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) + ylim(0, 6.5) +
geom_line(stat="summary", fun.y="mean", size=.5) +
stat_summary(fun.data=mean_se, geom="errorbar", width=.8) +
xlab("SV top - SV bottom") +
ylab("Response Time (s)") +
theme(text=element_text(size=20))
ggsave("plots/SV_RT.pdf",width=5.5, height=5)
ggplot(data=SV_bins, aes(x=dSV_bin, y=count)) +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) + ylim(0,20) +
geom_line(stat="summary", fun.y="mean", size=.5) +
stat_summary(fun.data=mean_se, geom="errorbar", width=.8) +
xlab("SV top - SV bottom") +
ylab("Number of Fixations") +
theme(text=element_text(size=20))
ggsave("plots/SV_Count.pdf",width=5.5, height=5)
SV_bins %>%
filter(dSV_bin < -4)
print(length(excludeSubjects))
excludeSubjects <- read.table('data_jupyter/excludeSubjects_choice.csv',
header=TRUE, sep=',')[, 1]
excludeSubjects = c(
excludeSubjects,
subjects_biasedChoices,
subjects_pos_logK,
subjects_noisy_logK,
subjects_missingLogK,
subjects_cannotSee
)
excludeSubjects
print(length(excludeSubjects))
generalCleaninng = function(data) {
data = data %>%
filter(
run_id < 1000 &
!(run_id %in% excludeSubjects)
)
}
data_subject = generalCleaninng(data_subject)
data_trial = generalCleaninng(data_trial)
data_et = generalCleaninng(data_et)
print(paste('Number of subjects: ', length(unique(data_trial$run_id))))
excludeSubjects <- read.table('data_jupyter/excludeSubjects_choice.csv',
header=TRUE, sep=',')[, 1]
excludeSubjects = unique(c(
excludeSubjects,
subjects_biasedChoices,
subjects_pos_logK,
subjects_noisy_logK,
subjects_missingLogK,
subjects_cannotSee
))
excludeSubjects
print(length(excludeSubjects))
excludeSubjects = c(
excludeSubjects,
subjects_biasedChoices,
subjects_pos_logK,
subjects_noisy_logK,
subjects_missingLogK,
subjects_cannotSee) %>%
unique()
excludeSubjects
print(length(excludeSubjects))
generalCleaninng = function(data) {
data = data %>%
filter(
run_id < 1000 &
!(run_id %in% excludeSubjects)
)
}
data_subject = generalCleaninng(data_subject)
data_trial = generalCleaninng(data_trial)
data_et = generalCleaninng(data_et)
print(paste('Number of subjects: ', length(unique(data_trial$run_id))))
data_trial$dSV_bin =
cut(data_trial$dSV_TB,
breaks = seq(-5, 5, 1),
labels = seq(-4.5, 4.5, 1),
include.lowest=TRUE) %>%
paste() %>%
as.numeric()
SV_bins = data_trial %>%
dplyr::group_by(run_id, dSV_bin) %>%
dplyr::summarise(
n=n(),
logK = mean(logK),
noise = mean(noise),
choseTop=mean(choseTop),
rt=mean(trial_duration_exact)/1000,
count=mean(x_count)) %>%
filter(n>1) %>%
arrange(dSV_bin)
SV_bins
print(
paste(
'Remaining subjects: ',
SV_bins %>%
dplyr::pull(run_id) %>%
unique() %>%
length()
)
)
ggplot(data=SV_bins, aes(x=dSV_bin, y=choseTop)) +
theme_bw() +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) +
geom_line(stat="summary", fun="mean", size=.5)+
stat_summary(fun.data=mean_se, geom="errorbar", width=.8)+
xlab("SV top - SV bottom")+ylab("Proportion top choices")+
theme(text=element_text(size=20))+ylim(0,1)
ggsave("plots/SV_choseTop.pdf", width=5.5, height=5)
ggplot(data=SV_bins, aes(x=dSV_bin, y=rt)) +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) + ylim(0, 6.5) +
geom_line(stat="summary", fun.y="mean", size=.5) +
stat_summary(fun.data=mean_se, geom="errorbar", width=.8) +
xlab("SV top - SV bottom") +
ylab("Response Time (s)") +
theme(text=element_text(size=20))
ggsave("plots/SV_RT.pdf",width=5.5, height=5)
ggplot(data=SV_bins, aes(x=dSV_bin, y=count)) +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) + ylim(0,20) +
geom_line(stat="summary", fun.y="mean", size=.5) +
stat_summary(fun.data=mean_se, geom="errorbar", width=.8) +
xlab("SV top - SV bottom") +
ylab("Number of Fixations") +
theme(text=element_text(size=20))
ggsave("plots/SV_Count.pdf",width=5.5, height=5)
ggplot(data=SV_bins, aes(x=dSV_bin, y=rt)) +
theme_bw() +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) + ylim(0, 6.5) +
geom_line(stat="summary", fun.y="mean", size=.5) +
stat_summary(fun.data=mean_se, geom="errorbar", width=.8) +
xlab("SV top - SV bottom") +
ylab("Response Time (s)") +
theme(text=element_text(size=20))
ggsave("plots/SV_RT.pdf",width=5.5, height=5)
