data_trial <- read_csv('data_jupyter/data_trial_fix.csv')
data_subject <- read_csv('data_jupyter/data_subject.csv')
merge_by_subject = function(data, data_source, varName) {
if (varName %in% names(data)) {
data = data %>% dplyr::select(!varName)
}
data = merge(
data,
data_source %>% dplyr::select(run_id, varName),
by='run_id')
return(data)
}
data_trial = data_trial %>%
merge_by_subject(data_subject, 'glasses_binary')
summary(data_et %>%
dplyr::select(x, y, t_task)
)
summary(data_trial %>%
dplyr::select(run_id, offset, precision, fps)
)
trialFPS = data_et %>%
group_by(run_id, trial_index) %>%
summarise(n = n())
trialFPS = merge(
trialFPS,
data_trial %>%
dplyr::select(run_id, trial_index, trial_duration_exact),
by=c('run_id', 'trial_index'))
trialFPS$fps = 1000 * trialFPS$n / trialFPS$trial_duration_exact
if ('fps_fix' %in% names(data_subject))
{data_subject = data_subject %>% select(!fps_fix)}
data_subject = merge(
data_subject,
trialFPS %>% group_by(run_id) %>% summarise(fps_fix = mean(fps)),
by='run_id'
)
summary(data_subject$fps_fix)
data_subject %>%
dplyr::select(run_id, triedChin, keptHead, fps_fix) %>%
filter(
triedChin==0 |
keptHead==0 |
fps_fix<3)
subjects_lowFPS = data_subject %>%
dplyr::select(run_id, triedChin, keptHead, fps_fix) %>%
filter(fps_fix<3) %>%
dplyr::pull(run_id)
print(paste(
'N Subjects with low FPS: ',
length(subjects_lowFPS)))
print(subjects_lowFPS)
subjects_noInstruction = data_subject %>%
dplyr::select(run_id, triedChin, keptHead, fps_fix) %>%
filter(triedChin==0 | keptHead==0) %>%
dplyr::pull(run_id)
print(paste(
'N Subjects who did not follow the instructions: ',
length(subjects_noInstruction)))
print(subjects_noInstruction)
high_t_task = data_et %>%
filter(t_task>5500) %>%
group_by(run_id, trial_index) %>%
summarise(t_task_max = max(t_task))
merge_by_index = function(data, data_source, varName) {
if ('trial_duration_exact' %in% names(high_t_task)) {
data = data %>% dplyr::select(!varName)
}
data = merge(
data,
data_source %>%
dplyr::select(run_id, trial_index, varName),
by=c('run_id', 'trial_index'))
return(data)
}
high_t_task = high_t_task %>%
merge_by_index(data_trial, 'trial_duration_exact')
unique(high_t_task$run_id)
high_t_task
# Number of trials per subject
ans = as.data.table(
data_trial %>%
dplyr::select(run_id, trial_index, chin, withinTaskIndex)
)[, count := uniqueN(trial_index), by = run_id]
ans %>%
filter(count!=18)
data_subject %>%
dplyr::select(run_id, glasses_binary) %>%
filter(is.na(glasses_binary))
subjects_NA_glasses = data_subject %>%
dplyr::select(run_id, glasses_binary) %>%
filter(is.na(glasses_binary)) %>%
dplyr::pull(run_id)
excludedSubjects = c(
1, 70, 80, 97, 131, 2012,
subjects_lowFPS,
subjects_noInstruction,
subjects_NA_glasses) %>%
sort() %>%
unique()
print(paste(
'N Excluded subjects: ',
length(excludedSubjects)))
print(excludedSubjects)
generalCleaning = function(data) {
data_name = deparse(substitute(data))
print(data_name)
print(paste('Raw: ', nrow(data)))
data = data %>%
filter(!(run_id %in% excludedSubjects))
print(paste('Cleaned: ', nrow(data)))
return(data)
}
data_trial = generalCleaning(data_trial)
data_subject = generalCleaning(data_subject)
print(paste('Raw: ', nrow(data_trial)))
data_trial = data_trial %>%
filter(
!is.na(precision) &
(trial_duration_exact<5100)
)
print(paste('Cleaned: ', nrow(data_trial)))
print(paste('Raw: ', nrow(data_et)))
data_et = data_et %>% filter((t_task<5100))
print(paste('Cleaned: ', nrow(data_et)))
predictors = c('withinTaskIndex',
'x_pos', 'y_pos', 'fps',
'glasses_binary', 'chin')
ggpairs(data_trial[, append(predictors, c('precision', 'offset'))],
progress=F) # Correlations
lm_null = lm(offset ~ 1, data = data_trial %>% filter(!is.na(offset)))
summary(lm_null)
lme0_io = lmer(
offset ~ 1 + (1 | run_id),
data=data_trial,
REML=FALSE) # FML for comparing different fixed effects
summary(lme0_io)
ICCest(factor(data_trial$run_id), data_trial$offset, alpha=.05, CI.type="THD")
data_trial = data_trial %>%
mutate(
y_pos_c = scale(y_pos),
x_pos_c = scale(x_pos),
fps_c = scale(fps))
lme1_control = lmer(
offset ~  withinTaskIndex + x_pos_c + y_pos_c + fps_c + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lme1_control)
anova(lme0_io, lme1_control)
lme2_control = lmer(
offset ~ y_pos_c + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lme2_control)
anova(lme0_io, lme2_control)
lme3_experimental = lmer(
offset ~ y_pos_c + glasses_binary + chin + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lme3_experimental)
anova(lme0_io, lme3_experimental)
lme4_experimental = lmer(
offset ~ y_pos_c + chin + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lme4_experimental)
lme5_rs = lmer(
offset ~ y_pos_c + chin + (chin | run_id),
data=data_trial,
REML=FALSE)
summary(lme5_rs)
ranef(lme5_rs)
anova(lme4_experimental, lme5_rs)
# Get average
grouped = data_trial %>%
group_by(run_id) %>%
summarise(fps_subject = mean(fps))
data_trial = data_trial %>%
merge_by_subject(grouped, 'fps_subject') %>%
mutate(fps_subject_c = fps - mean(grouped$fps_subject))
lme6_iao = lmer(
offset ~ y_pos_c + chin + fps_subject_c + (chin | run_id),
data=data_trial,
REML=FALSE)
summary(lme6_iao)
ranef(lme6_iao)
anova(lme5_rs, lme6_iao)
lmer7_iao = lmer(
offset ~ y_pos_c + chin * fps_subject_c + (chin | run_id),
data=data_trial,
REML=FALSE)
summary(lmer7_iao)
lme4_interaction = lmer(
offset ~ y_pos_c * chin + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lme4_interaction)
anova(lme4_interaction, lme4_interaction)
data_trial = data_trial %>%
mutate(
y_pos_c = scale(y_pos),
x_pos_c = scale(x_pos),
fps_c = scale(fps))
lmer1_control = lmer(
offset ~  withinTaskIndex + x_pos_c + y_pos_c + fps_c + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lmer1_control)
anova(lmer0_io, lmer1_control)
lm_null = lm(offset ~ 1, data = data_trial %>% filter(!is.na(offset)))
summary(lm_null)
lmer0_io = lmer(
offset ~ 1 + (1 | run_id),
data=data_trial,
REML=FALSE) # FML for comparing different fixed effects
summary(lmer0_io)
ICCest(factor(data_trial$run_id), data_trial$offset, alpha=.05, CI.type="THD")
data_trial = data_trial %>%
mutate(
y_pos_c = scale(y_pos),
x_pos_c = scale(x_pos),
fps_c = scale(fps))
lmer1_control = lmer(
offset ~  withinTaskIndex + x_pos_c + y_pos_c + fps_c + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lmer1_control)
anova(lmer0_io, lmer1_control)
lmer2_control = lmer(
offset ~ y_pos_c + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lmer2_control)
anova(lmer0_io, lmer2_control)
lmer3_experimental = lmer(
offset ~ y_pos_c + glasses_binary + chin + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lmer3_experimental)
anova(lmer2_control, lmer3_experimental)
lmer5_interaction = lmer(
offset ~ y_pos_c * chin + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lmer5_interaction)
anova(lmer4_experimental, lmer5_interaction)
lmer4_experimental = lmer(
offset ~ y_pos_c + chin + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lmer4_experimental)
lmer5_interaction = lmer(
offset ~ y_pos_c * chin + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lmer5_interaction)
anova(lmer4_experimental, lmer5_interaction)
lmer6_rs = lmer(
offset ~ y_pos_c + chin + (chin | run_id),
data=data_trial,
REML=FALSE)
summary(lmer6_rs)
ranef(lmer6_rs)
anova(lmer4_experimental, lmer6_rs)
# Get average
grouped = data_trial %>%
group_by(run_id) %>%
summarise(fps_subject = mean(fps))
data_trial = data_trial %>%
merge_by_subject(grouped, 'fps_subject') %>%
mutate(fps_subject_c = fps - mean(grouped$fps_subject))
lmer7_iao = lmer(
offset ~ y_pos_c + chin + fps_subject_c + (chin | run_id),
data=data_trial,
REML=FALSE)
summary(lmer7_iao)
ranef(lmer7_iao)
anova(lmer6_rs, lmer7_iao)
# Get average
grouped = data_trial %>%
group_by(run_id) %>%
summarise(fps_subject = mean(fps))
data_trial = data_trial %>%
merge_by_subject(grouped, 'fps_subject') %>%
mutate(fps_subject_c = fps - mean(grouped$fps_subject))
lmer7_iao = lmer(
offset ~ y_pos_c + chin + fps_subject_c + (chin | run_id),
data=data_trial,
REML=FALSE)
summary(lmer7_iao)
# ranef(lmer7_iao)
anova(lmer6_rs, lmer7_iao)
lmer8_cli = lmer(
offset ~ y_pos_c + chin * fps_subject_c + (chin | run_id),
data=data_trial,
REML=FALSE)
summary(lmer8_cli)
anova(lmer7_iao, lmer8_cli)
m0 <- lmer(offset ~ y_pos_c + (1 | run_id),
data=data_trial,
REML=FALSE)
m1 <- lmer(offset ~ y_pos_c + chin + (1 | run_id),
data=data_trial,
REML=FALSE)
L1_m0 <- sigma(m0)^2 # L1-Residualvarianz RIO Modell
L1_m1 <- sigma(m1)^2 # L1-Residualvarianz RI Modell
print('Pseudo R^2')
print(paste(
'Reduction of L1 variance due to chin: ',
(L1_m0 - L1_m1)/L1_m0
))
L2_m0 <- unlist(summary(m0)$var) # Interceptvarianz RI Modell
L2_m1 <- unlist(summary(m1)$var) # Interceptvarianz IAO Modell
print(paste(
'Reduction of L2 variance due to chin: ',
(L2_m0 - L2_m1)/L2_m0
))
setwd("C:/Users/User/GitHub/WebET_Analysis")
getPackages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
getPackages(c(
'boot',
'broom',
'car',
'compiler',
'data.table',
'DHARMa',
"dplyr",
'GGally',
'ggplot2',
'HLMdiag',
'Hmisc',
'influence.ME',
"ICC",
"knitr",
'lme4',
'lattice',
'lme4',
"lmerTest", # Erhalte p-Werte
'nlme',
'parallel',
'readr',
'reshape',
'reshape2',
"rsq",
'tidyverse',
"tinytex"))
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) # Show R markdown output as Integers
data_et <- read_csv('data_jupyter/data_et_fix.csv')
data_trial <- read_csv('data_jupyter/data_trial_fix.csv')
data_subject <- read_csv('data_jupyter/data_subject.csv')
merge_by_subject = function(data, data_source, varName) {
if (varName %in% names(data)) {
data = data %>% dplyr::select(!varName)
}
data = merge(
data,
data_source %>% dplyr::select(run_id, varName),
by='run_id')
return(data)
}
data_trial = data_trial %>%
merge_by_subject(data_subject, 'glasses_binary')
subjects_cannotSee = data_subject %>%
filter(sight == 'notCorrected' &
glasses == 'longSight') %>%
dplyr::pull(run_id)
print(paste(
'Subjects who are long-sighted but do not wear corrections: ',
subjects_cannotSee
))
summary(data_et %>%
dplyr::select(x, y, t_task)
)
summary(data_trial %>%
dplyr::select(run_id, offset, precision, fps)
)
trialFPS = data_et %>%
group_by(run_id, trial_index) %>%
summarise(n = n())
trialFPS = merge(
trialFPS,
data_trial %>%
dplyr::select(run_id, trial_index, trial_duration_exact),
by=c('run_id', 'trial_index'))
trialFPS$fps = 1000 * trialFPS$n / trialFPS$trial_duration_exact
if ('fps_fix' %in% names(data_subject))
{data_subject = data_subject %>% select(!fps_fix)}
data_subject = merge(
data_subject,
trialFPS %>% group_by(run_id) %>% summarise(fps_fix = mean(fps)),
by='run_id'
)
summary(data_subject$fps_fix)
data_subject %>%
dplyr::select(run_id, triedChin, keptHead, fps_fix) %>%
filter(
triedChin==0 |
keptHead==0 |
fps_fix<3)
subjects_lowFPS = data_subject %>%
dplyr::select(run_id, triedChin, keptHead, fps_fix) %>%
filter(fps_fix<3) %>%
dplyr::pull(run_id)
print(paste(
'N Subjects with low FPS: ',
length(subjects_lowFPS)))
print(subjects_lowFPS)
subjects_noInstruction = data_subject %>%
dplyr::select(run_id, triedChin, keptHead, fps_fix) %>%
filter(triedChin==0 | keptHead==0) %>%
dplyr::pull(run_id)
print(paste(
'N Subjects who did not follow the instructions: ',
length(subjects_noInstruction)))
print(subjects_noInstruction)
high_t_task = data_et %>%
filter(t_task>5500) %>%
group_by(run_id, trial_index) %>%
summarise(t_task_max = max(t_task))
merge_by_index = function(data, data_source, varName) {
if ('trial_duration_exact' %in% names(high_t_task)) {
data = data %>% dplyr::select(!varName)
}
data = merge(
data,
data_source %>%
dplyr::select(run_id, trial_index, varName),
by=c('run_id', 'trial_index'))
return(data)
}
high_t_task = high_t_task %>%
merge_by_index(data_trial, 'trial_duration_exact')
unique(high_t_task$run_id)
high_t_task
# Number of trials per subject
ans = as.data.table(
data_trial %>%
dplyr::select(run_id, trial_index, chin, withinTaskIndex)
)[, count := uniqueN(trial_index), by = run_id]
ans %>%
filter(count!=18)
data_subject %>%
dplyr::select(run_id, glasses_binary) %>%
filter(is.na(glasses_binary))
subjects_NA_glasses = data_subject %>%
dplyr::select(run_id, glasses_binary) %>%
filter(is.na(glasses_binary)) %>%
dplyr::pull(run_id)
excludedSubjects = c(
1, 70, 80, 97, 131, 2012,
subjects_lowFPS,
subjects_noInstruction,
subjects_NA_glasses,
subjects_cannotSee) %>%
sort() %>%
unique()
print(paste(
'N Excluded subjects: ',
length(excludedSubjects)))
print(excludedSubjects)
generalCleaning = function(data) {
data_name = deparse(substitute(data))
print(data_name)
print(paste('Raw: ', nrow(data)))
data = data %>%
filter(!(run_id %in% excludedSubjects))
print(paste('Cleaned: ', nrow(data)))
return(data)
}
data_trial = generalCleaning(data_trial)
data_subject = generalCleaning(data_subject)
print(paste('Raw: ', nrow(data_trial)))
data_trial = data_trial %>%
filter(
!is.na(precision) &
(trial_duration_exact<5100)
)
print(paste('Cleaned: ', nrow(data_trial)))
print(paste('Raw: ', nrow(data_et)))
data_et = data_et %>% filter((t_task<5100))
print(paste('Cleaned: ', nrow(data_et)))
names(data_trial)
predictors = c('withinTaskIndex', 'window_diagonal'
'x_pos', 'y_pos', 'fps',
predictors = c('withinTaskIndex', 'window_diagonal',
'x_pos', 'y_pos', 'fps',
'glasses_binary', 'chin')
ggpairs(data_trial[, append(predictors, c('precision', 'offset'))],
progress=F) # Correlations
data_trial = data_trial %>%
mutate(
y_pos_c = scale(y_pos),
x_pos_c = scale(x_pos),
fps_c = scale(fps),
window_c = scale(window_diagonal))
lmer1_control = lmer(
offset ~  withinTaskIndex + x_pos_c + y_pos_c + fps_c + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lmer1_control)
summary(lmer1_control)
anova(lmer0_io, lmer1_control)
lmer1_control = lmer(
offset ~  withinTaskIndex + x_pos_c + y_pos_c + window_c + fps_c + (1 | run_id),
data=data_trial,
REML=FALSE)
summary(lmer1_control)
