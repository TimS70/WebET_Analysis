for (subject in unique(data$run_id)){
df_subject = data %>% filter(run_id == subject)
for (trial in unique(df_subject$withinTaskIndex)) {
df_trial = df_subject %>% filter(withinTaskIndex == trial)
this_timeBin = cut(
df_trial$t_task, nBins,
labels = c(1:nBins),
include.lowest=TRUE)
data = data %>%
mutate(timeBin=replace(
timeBin,
run_id==subject & withinTaskIndex==trial,
this_timeBin))
}
progress_bar$pause(0.1)$tick()$print()
}
return(data)
}
data_et = createTimeBins(data_et, 5)
data_et %>%
dplyr::select(run_id, withinTaskIndex, timeBin, t_task, aoi) %>%
arrange(run_id, withinTaskIndex, timeBin, t_task)
subjects_highFPS = data_subject %>%
filter(fps>10) %>%
arrange(run_id) %>%
dplyr::pull(run_id)
timeBins_choseTB_long <- data_et %>%
filter(!is.na(aoi) & aoi!=0 &
run_id %in% subjects_highFPS) %>%
mutate(
lookTop = as.numeric(aoi %in% c('TL', 'TR')),
lookBottom = as.numeric(aoi %in% c('BL', 'BR'))) %>%
dplyr::group_by(run_id, choseTop, timeBin) %>%
dplyr::summarise(
n = n(),
n_lookTop = sum(lookTop),
n_lookBottom = sum(lookBottom),
p_lookTop = sum(lookTop)/n,
p_lookBottom = sum(lookBottom)/n) %>%
arrange(choseTop)
timeBins_choseTB_long
timeBins_choseTB_long %>%
group_by(run_id, choseTop) %>%
summarise(n=length(unique(timeBin))) %>%
filter(n<5)
subjects_not_enough_bins = timeBins_choseTB_long %>%
group_by(run_id, choseTop) %>%
summarise(n=length(unique(timeBin))) %>%
filter(n<5) %>%
dplyr::pull(run_id)
timeBins_choseTB_long %>%
filter(timeBin %in% c(4, 5)) %>%
dplyr::group_by(timeBin, choseTop) %>%
dplyr::summarise(p_lookTop = mean(p_lookTop))
#Violin plot of time bins
timeBins_choseTB_long$choseTop = as.factor(timeBins_choseTB_long$choseTop)
for (bin in unique(timeBins_choseTB_long$timeBin)) {
print(t.test(p_lookTop ~ choseTop,
data=timeBins_choseTB_long %>%
filter(timeBin==bin &
!(run_id %in% subjects_not_enough_bins)),
paired=TRUE))
}
plot_aoi_across_time = function(
data, yVar, title='AOI across timeBins') {
plot = ggplot(
data,
aes(x=factor(timeBin), y=yVar, fill=factor(choseTop, c('1', '0')))) +
geom_split_violin(alpha=.7, size=1, position="dodge") +
stat_summary(
fun=mean, geom="point",
shape=45,size=10,
position=position_dodge(.9),
aes(color=factor(choseTop, c('1', '0')))) +
theme_bw() +
theme(text=element_text(size=20),
legend.position="bottom") +
ggtitle(title) +
scale_colour_manual(
values=c("1"="black", "0"="white"),
name="",
labels=c("Chose Top", "Chose Bottom")) +
scale_fill_grey(
start=.3, end=.7, name="",
labels=c("Chose Top", "Chose Bottom")) +
# If significant
ylab(deparse(substitute(yVar))) +
xlab("Time bins")
print(plot)
}
timeBins_choseTB_long %>%
plot_aoi_across_time(timeBins_choseTB_long$p_lookTop, 'p_lookTop')
ggplot(timeBins_choseTB_long,
aes(x=factor(timeBin), y=p_lookTop, fill=factor(choseTop, c('1', '0')))) +
geom_split_violin(alpha=.7, size=1, position="dodge") +
stat_summary(
fun=mean, geom="point",
shape=45,size=10,
position=position_dodge(.9),
aes(color=factor(choseTop, c('1', '0')))) +
theme_bw() +
theme(text=element_text(size=20),
legend.position="bottom") +
ggtitle('Eye-tracking time bins') +
scale_colour_manual(
values=c("1"="black", "0"="white"),
name="",
labels=c("Chose Top", "Chose Bottom")) +
scale_fill_grey(
start=.3, end=.7, name="",
labels=c("Chose Top", "Chose Bottom")) +
# If significant
geom_text(x=5, y=1.03, label="***") +
annotate("segment",x=4.7, xend=5.3, y=1.02, yend=1.02) +
ylab("Proportion looking top") +
xlab("Time bins")
ggsave("plots/et_bins_tb.pdf",width=5.5, height=5)
create_eyeTracking_Bins = function(data, nBins) {
data$et_bin = 0
progress_bar <- progress_estimated(length(unique(data$run_id)), 0)
for (subject in unique(data$run_id)){
df_subject = data %>% filter(run_id == subject)
for (trial in unique(df_subject$withinTaskIndex)) {
df_trial = df_subject %>% filter(withinTaskIndex == trial)
this_et_bin = cut(
c(1:nrow(df_trial)),
nBins,
labels = c(1:nBins),
include.lowest=TRUE)
data = data %>%
mutate(et_bin=replace(
et_bin,
run_id==subject & withinTaskIndex==trial,
this_et_bin))
}
progress_bar$pause(0.1)$tick()$print()
}
return(data)
}
data_et = create_eyeTracking_Bins(data_et, 5)
data_et %>%
group_by(run_id, withinTaskIndex, et_bin) %>%
summarise(n=n())
data_et %>%
dplyr::select(run_id, withinTaskIndex, et_bin, t_task) %>%
arrange(run_id, withinTaskIndex, et_bin, t_task)
subjects_highFPS = data_subject %>%
filter(fps>10) %>%
arrange(run_id) %>%
dplyr::pull(run_id)
et_bins_choseTB_long = data_et %>%
filter(!is.na(aoi) & aoi!=0 &
run_id %in% subjects_highFPS) %>%
mutate(
lookTop = as.numeric(aoi %in% c('TL', 'TR')),
lookBottom = as.numeric(aoi %in% c('BL', 'BR'))) %>%
dplyr::group_by(run_id, choseTop, et_bin) %>%
dplyr::summarise(
n = n(),
n_lookTop = sum(lookTop),
n_lookBottom = sum(lookBottom),
p_lookTop = sum(lookTop)/n,
p_lookBottom = sum(lookBottom)/n) %>%
arrange(choseTop)
et_bins_choseTB_long
et_bins_choseTB_long %>%
group_by(run_id, choseTop) %>%
summarise(n=length(unique(et_bin))) %>%
filter(n<5)
subjects_not_enough_bins = et_bins_choseTB_long %>%
group_by(run_id, choseTop) %>%
summarise(n=length(unique(et_bin))) %>%
filter(n<5) %>%
dplyr::pull(run_id)
et_bins_choseTB_long %>%
filter(et_bin %in% c(4, 5)) %>%
dplyr::group_by(et_bin, choseTop) %>%
dplyr::summarise(p_lookTop = mean(p_lookTop))
#Violin plot of time bins
et_bins_choseTB_long$choseTop = as.factor(et_bins_choseTB_long$choseTop)
for (bin in unique(et_bins_choseTB_long$et_bin)) {
print(t.test(p_lookTop ~ choseTop,
data=et_bins_choseTB_long %>%
filter(et_bin==bin &
!(run_id %in% subjects_not_enough_bins)),
paired=TRUE))
}
plot_aoi_across_time = function(
data, yVar, title='AOI across et_bins') {
plot = ggplot(
data,
aes(x=factor(et_bin), y=yVar, fill=factor(choseTop, c('1', '0')))) +
geom_split_violin(alpha=.7, size=1, position="dodge") +
stat_summary(
fun=mean, geom="point",
shape=45,size=10,
position=position_dodge(.9),
aes(color=factor(choseTop, c('1', '0')))) +
theme_bw() +
theme(text=element_text(size=20),
legend.position="bottom") +
ggtitle(title) +
scale_colour_manual(
values=c("1"="black", "0"="white"),
name="",
labels=c("Chose Top", "Chose Bottom")) +
scale_fill_grey(
start=.3, end=.7, name="",
labels=c("Chose Top", "Chose Bottom")) +
# If significant
ylab(deparse(substitute(yVar))) +
xlab("Time bins")
print(plot)
}
et_bins_choseTB_long %>%
plot_aoi_across_time(et_bins_choseTB_long$p_lookTop, 'p_lookTop')
et_bins_choseTB_long %>%
plot_aoi_across_time(et_bins_choseTB_long$p_lookBottom, 'p_lookBottom')
et_bins_choseTB_long %>%
plot_aoi_across_time(et_bins_choseTB_long$p_nullAOI, 'p_nullAOI')
setwd("C:/Users/User/GitHub/WebET_Analysis")
getPackages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
getPackages(c('plyr',
'dplyr',
"effsize",
'e1071',
"ggplot2",
"ggsignif",
'knitrProgressBar',
'matlabr',
'progress',
'QuantPsyc',
"RColorBrewer",
'reshape2',
'tidyr')
)
source("r_functions/geom_split_violin.R")
source("r_functions/merge_mean_by_subject.R")
data_subject <- read.table('data_jupyter/data_subject.csv',
header=TRUE, sep=',')
data_subject
data_trial <- read.table('data_jupyter/data_trial_choice.csv',
header=TRUE, sep=',')
data_trial
data_et <- read.table('data_jupyter/data_et_choice.csv',
header=TRUE, sep=',')
grouped = data_trial %>%
dplyr::group_by(run_id, trial_index) %>%
dplyr::summarise(
choseTop = mean(choseTop),
.groups = 'keep')
if ('choseTop' %in% names(data_et))
{data_et = data_et %>% select(!choseTop)}
data_et = merge(data_et, grouped, by=c('run_id', 'trial_index'))
data_et
#run_matlab_script('fitK/fit_discount_k.m')
add_logK = function(data) {
logK <- read.table('fitK/logK.csv', header=TRUE, sep=',')
if ('logK' %in% names(data)) {
data = data %>% dplyr::select(!'logK')
}
if ('noise' %in% names(data)) {
data = data %>% dplyr::select(!'noise')
}
data = merge(data, logK, by='run_id')
return(data)
}
data_subject = add_logK(data_subject)
data_trial = add_logK(data_trial)
data_subject %>%
dplyr::select(run_id, logK, noise)
data_trial %>%
dplyr::group_by(run_id) %>%
dplyr::summarise(logK, noise, .groups='keep')
subjects_cannotSee = data_subject %>%
filter(sight == 'notCorrected' &
glasses == 'longSight') %>%
dplyr::pull(run_id)
print(paste(
'Subjects who are long-sighted but do not wear corrections: ',
subjects_cannotSee
))
ggplot(data_subject, aes(x=logK))+
geom_histogram(binwidth=.5, alpha=.5, position="identity")+
scale_fill_manual(values=c("palegreen","cornflowerblue"), name="") +
theme_bw()+theme(text=element_text(size=40))
ggsave("plots/logk_hist.pdf", width=5.5, height=5)
ggplot(data_subject, aes(x=noise))+
geom_histogram(binwidth=5, alpha=.5, position="identity")+
scale_fill_manual(values=c("palegreen","cornflowerblue"), name="") +
theme_bw()+theme(text=element_text(size=40))
ggsave("plots/logk_hist.pdf", width=5.5, height=5)
ggplot(data_subject, aes(x=logK, y=noise)) +
geom_point(size=2.5, aes(alpha=.5))+
guides(alpha=FALSE,color=FALSE, shape=FALSE)+
theme_bw() +
scale_colour_grey() +
theme(text=element_text(size=20)) +
xlab("logK") + ylab("noise") +
ggtitle('logK vs. noise')
ggplot(data_subject %>% filter(noise < 500), aes(x=logK, y=noise)) +
geom_point(size=2.5, aes(alpha=.5))+
guides(alpha=FALSE,color=FALSE, shape=FALSE)+
theme_bw() +
scale_colour_grey() +
theme(text=element_text(size=20)) +
xlab("logK") + ylab("noise") +
ggtitle('logK vs. noise')
subjects_biasedChoices = data_subject %>%
filter(
choseLL>0.98 | choseLL<0.02 |
choseTop>0.98 | choseTop<0.02
) %>%
arrange(run_id) %>%
dplyr::pull(run_id)
subjects_biasedChoices
subjects_missingLogK = data_subject %>%
filter(is.na(logK)) %>%
arrange(run_id) %>%
dplyr::pull(run_id)
subjects_missingLogK
subjects_noisy_logK = data_subject %>%
filter(noise>40) %>%
arrange(run_id) %>%
dplyr::pull(run_id)
subjects_noisy_logK
subjects_pos_logK = data_subject %>%
filter(logK>0) %>%
arrange(run_id) %>%
dplyr::pull(run_id)
subjects_pos_logK
grouped_NA_ET = data_trial %>%
filter(!is.na(fps)) %>%
group_by(run_id) %>%
dplyr::summarise(fps = mean(fps),
n_NA_OI = sum(is.na(optionIndex)),
n_NA_AI = sum(is.na(attributeIndex)),
n_NA_PI = sum(is.na(payneIndex))) %>%
arrange(n_NA_OI, n_NA_AI, n_NA_PI)
grouped_NA_ET
subjects_NA_OI = grouped_NA_ET %>%
filter(n_NA_OI>40) %>%
dplyr::pull(run_id)
subjects_NA_AI = grouped_NA_ET %>%
filter(n_NA_AI>40) %>%
dplyr::pull(run_id)
subjects_NA_PI = grouped_NA_ET %>%
filter(n_NA_PI>40) %>%
dplyr::pull(run_id)
excludeSubjects <- read.table('data_jupyter/excludeSubjects_choice.csv',
header=TRUE, sep=',')[, 1]
excludeSubjects = c(
excludeSubjects,
subjects_biasedChoices,
subjects_pos_logK,
subjects_noisy_logK,
subjects_missingLogK,
subjects_cannotSee) %>%
unique()
excludeSubjects
print(length(excludeSubjects))
generalCleaninng = function(data) {
data = data %>%
filter(
run_id < 1000 &
!(run_id %in% excludeSubjects)
)
}
data_subject = generalCleaninng(data_subject)
data_trial = generalCleaninng(data_trial)
data_et = generalCleaninng(data_et)
print(paste('Number of subjects: ', length(unique(data_trial$run_id))))
#Replication sample
ggplot(data_subject, aes(x=choseTop))+
geom_histogram(bins=15)+theme_bw()+xlab("Proportion Top Choices")+
theme(text=element_text(size=20))+xlim(0,1)
ggsave("plots/choiceSide.pdf",width=5.5, height=5)
ggplot(data_subject, aes(x=logK))+
geom_histogram(binwidth=.5, alpha=.5, position="identity")+
scale_fill_manual(values=c("palegreen","cornflowerblue"), name="") +
theme_bw()+theme(text=element_text(size=40))
ggsave("plots/logk_hist.pdf", width=5.5, height=5)
subjectiveValues = function(data) {
data$svLL = data$aLL / (1 + exp(data$logK) * data$tLL)
data$svSS = data$aSS / (1 + exp(data$logK) * data$tSS)
data$dSV_LLSS = data$svLL - data$svSS
data$svT = data$aT / (1+ exp(data$logK) * data$tT)
data$svB = data$aB / (1+ exp(data$logK) * data$tB)
data$dSV_TB = data$svT - data$svB
return(data)
}
data_trial = subjectiveValues(data_trial)
data_trial %>%
dplyr::select(run_id, aT, tT, svT, aB, tB, svB, dSV_TB, choseTop) %>%
mutate(across(c('svT', 'svB', 'dSV_TB'), round, 2)) %>%
arrange(dSV_TB)
data_trial$dSV_bin =
cut(data_trial$dSV_TB,
breaks = seq(-5, 5, 1),
labels = seq(-4.5, 4.5, 1),
include.lowest=TRUE) %>%
paste() %>%
as.numeric()
SV_bins = data_trial %>%
dplyr::group_by(run_id, dSV_bin) %>%
dplyr::summarise(
n=n(),
logK = mean(logK),
noise = mean(noise),
choseTop=mean(choseTop),
rt=mean(trial_duration_exact)/1000,
count=mean(x_count),
.groups = 'keep') %>%
filter(n>1) %>%
arrange(dSV_bin)
SV_bins
print(
paste(
'Remaining subjects: ',
SV_bins %>%
dplyr::pull(run_id) %>%
unique() %>%
length()
)
)
ggplot(data=SV_bins, aes(x=dSV_bin, y=choseTop)) +
theme_bw() +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) +
geom_line(stat="summary", fun="mean", size=.5)+
stat_summary(fun.data=mean_se, geom="errorbar", width=.8)+
xlab("SV top - SV bottom")+ylab("Proportion top choices")+
theme(text=element_text(size=20))+ylim(0,1)
ggsave("plots/SV_choseTop.pdf", width=5.5, height=5)
ggplot(data=SV_bins, aes(x=dSV_bin, y=rt)) +
theme_bw() +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) + ylim(0, 6.5) +
geom_line(stat="summary", fun="mean", size=.5) +
stat_summary(fun.data=mean_se, geom="errorbar", width=.8) +
xlab("SV top - SV bottom") +
ylab("Response Time (s)") +
theme(text=element_text(size=20))
ggsave("plots/SV_RT.pdf",width=5.5, height=5)
ggplot(data=SV_bins, aes(x=dSV_bin, y=count)) +
theme_bw() +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) + ylim(0,20) +
geom_line(stat="summary", fun="mean", size=.5) +
stat_summary(fun.data=mean_se, geom="errorbar", width=.8) +
xlab("SV top - SV bottom") +
ylab("Number of Fixations") +
theme(text=element_text(size=20))
ggsave("plots/SV_Count.pdf",width=5.5, height=5)
ggplot(data_subject %>% filter(!run_id %in% subjects_NA_OI),
aes(x=optionIndex, y=logK)) +
geom_point(size=2.5, aes(alpha=.5)) +
guides(alpha=FALSE,color=FALSE, shape=FALSE) +
theme_bw() +
xlim(-1,1) +
theme(text=element_text(size=20))+
xlab("Option index") +
ylab("log(k)") +
scale_colour_grey()
ggsave('plots/logK_OI.pdf',width=5.7, height=5)
data_test = data_subject %>% filter(!run_id %in% subjects_NA_OI)
cor.test(data_test$optionIndex, data_test$logK)
ggplot(data_subject %>% filter(!run_id %in% subjects_NA_AI),
aes(x=attributeIndex, y=logK)) +
geom_point(size=2.5, aes(alpha=.5))+
guides(alpha=FALSE,color=FALSE, shape=FALSE)+
theme_bw() +
xlim(-1,1) +
scale_colour_grey()
theme(text=element_text(size=20))+
xlab("Attribute index") + ylab("log(k)")
ggsave("plots/logk_AI.pdf",width=5.7, height=5)
data_test = data_subject %>% filter(!run_id %in% subjects_NA_AI)
cor.test(data_test$attributeIndex, data_test$logK)
#Plot correlation between Payne index and discount rate
#Replication sample
ggplot(data_subject %>% filter(!run_id %in% subjects_NA_AI),
aes(x=payneIndex, y=logK)) +
geom_point(size=2.5, aes(alpha=.5))+
guides(alpha=FALSE,color=FALSE, shape=FALSE)+
theme_bw() +
xlim(-1,1) +
scale_colour_grey() +
theme(text=element_text(size=20))+
xlab("Payne index") +
ylab("log(k)")
ggsave("plots/logk_PI.pdf",width=5.7, height=5)
data_test = data_subject %>% filter(!run_id %in% subjects_NA_PI)
cor.test(data_test$payneIndex, data_test$logK)
ggplot(data_subject %>%
filter(!run_id %in% c(subjects_NA_OI, subjects_NA_AI)),
aes(x=optionIndex, y=attributeIndex)) +
geom_point(size=2.5, aes(alpha=.5)) +
guides(alpha=FALSE,color=FALSE, shape=FALSE) +
theme_bw() +
xlim(-1,1) +
theme(text=element_text(size=20))+
xlab("Option index") +
ylab("Attribute Index") +
scale_colour_grey()
names(data_trial)
names(data_et)
