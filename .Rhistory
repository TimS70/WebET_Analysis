ggsave("plots/RT_TB.pdf",width=5.5, height=5)
choseT$chose_top = as.factor(choseT$chose_top)
class(choseT$chose_top)
for (i in 3:7) {
tTest = t.test(choseT[[i]], choseB[[i]], paired=TRUE)
print(tTest)
}
cohen.d(as.numeric(choseT[[3]]),as.numeric(choseB[[3]]),pooled=TRUE,paired=TRUE)
choseTBLong$chose_top = as.factor(choseTBLong$chose_top)
choseTBLong$bin = as.factor(choseTBLong$bin)
#Violin plot of time bins
ggplot(choseTBLong, aes(x=bin, y=lookTopAOI, fill=chose_top))+
geom_violin(alpha=.7, size=0, position="dodge")+
stat_summary(fun=mean,geom="point",shape=45,size=10, position=position_dodge(.9), aes(color=chose_top))+
scale_colour_manual(values=c(1, 2), name="", labels=c("Chose top", "Chose bottom"))+
geom_text(x=1, y=1.01, label="")+ annotate("segment",x=0.7, xend=1.3, y=1, yend=1)+
geom_text(x=2, y=1.01, label="")+ annotate("segment",x=1.7, xend=2.3, y=1, yend=1)+
geom_text(x=3, y=1.01, label="")+ annotate("segment",x=2.7, xend=3.3, y=1, yend=1)+
geom_text(x=4, y=1.01, label="")+ annotate("segment",x=3.7, xend=4.3, y=1, yend=1)+
geom_text(x=5, y=1.01, label="")+ annotate("segment",x=4.7, xend=5.3, y=1, yend=1)+
scale_fill_grey(start=.3, end=.7, name="",labels=c("Chose top", "Chose bottom")) +
xlab("Time bins") + ylab("Proportion looking top") +
theme_bw()+theme(text=element_text(size=20), legend.position="bottom")
ggsave("plots/ET_TB.pdf",width=5.5, height=5)
#Violin plot last fixation location
t.test(lookT[,2],lookB[,2], paired=TRUE) #Already adjusted for ET exclusions
lookTBLong
t.test(chose_top ~ lastFixTop, data=lookTBLong, paired=TRUE) #Already adjusted for ET exclusions
cohen.d(chose_top ~ lastFixTop, data=lookTBLong, paired=TRUE, pooled=TRUE)
lookTBLong$lastFixTop=factor(lookTBLong$lastFixTop,levels=c("Last fix. top","Last fix. bottom"), ordered=TRUE)
meanT<- lookTBLong %>%
filter(lookTBLong == 'Last fix. top') %>%
mean
lookTBLong$lastFixTop=factor(lookTBLong$lastFixTop,levels=c("Last fix. top","Last fix. bottom"), ordered=TRUE)
meanT<- lookTBLong %>%
filter(lookTBLong == 'Last fix. top') %>%
mean
lookTBLong
meanT<- lookTBLong %>%
filter(lookTBLong == 1) %>%
mean
meanT<- lookTBLong %>%
filter(lookTBLong == 1) %>%
ggplot(lookTBLong, aes(x=lastFixTop,y=chose_top))+
geom_violin(fill="gray", size=0)+
stat_summary(fun.y=mean,geom="point",shape=45,size=10, color="white")+
geom_text(x=1.5, y=1.02, label="***")+
annotate("segment",x=1, xend=2, y=1.01, yend=1.01)+
theme_bw()+ylim(0,1.03)+xlab("") +
ylab("Proportion top choices") +
xlab("last Fixation on Top AOIs") +
theme(text=element_text(size=20))
meanT<- lookTBLong %>%
filter(lookTBLong == 1)
addLastFix <- function(data) {
if("lastFixTop" %in% colnames(data)){
cat("LastFixTop already added!\n");
output = data
} else {
combinedSubjects = list()
subjects = unique(data$run_id)
for (i in 1:length(subjects)) {
maxChoices = data %>%
filter(run_id == subjects[i]) %>%
dplyr::select(choiceNr) %>%
max
combinedTrials = list()
for (j in 1:maxChoices) {
thisTrial = data %>%
filter(run_id == subjects[i] & choiceNr == j)
thisTrial$lastFixTop = thisTrial[nrow(thisTrial), 'lookTopAOI']
combinedTrials[[j]] = thisTrial
}
combinedTrial = bind_rows(combinedTrials)
combinedSubjects[[i]] = combinedTrials
}
output = bind_rows(combinedSubjects)
}
return(output)
}
data_et_choice = data_et_choice %>%
addLastFix()
lookT <- data_et_choice %>%
filter(lastFixTop == 1) %>%
dplyr::select(run_id, choiceNr, chose_top) %>%
group_by(run_id, choiceNr) %>%
summarise(chose_top=mean(chose_top)) %>%
group_by(run_id) %>%
summarise(chose_top=mean(chose_top))
lookT
lookB <- data_et_choice %>%
filter(lastFixTop == 0) %>%
dplyr::select(run_id, choiceNr, chose_top) %>%
group_by(run_id, choiceNr) %>%
summarise(chose_top=mean(chose_top)) %>%
group_by(run_id) %>%
summarise(chose_top=mean(chose_top))
lookB
lookTBLong <- data_et_choice %>%
dplyr::select(run_id, choiceNr, lastFixTop, chose_top) %>%
group_by(run_id, lastFixTop, choiceNr) %>%
summarise(chose_top=mean(chose_top)) %>%
group_by(run_id, lastFixTop) %>%
summarise(chose_top=mean(chose_top))
lookTBLong
meanT<- lookTBLong %>%
filter(lookTBLong == 1)
lookTBLong
meanT<- lookTBLong %>%
filter(lastFixTop == 1)
meanT<- lookTBLong %>%
filter(lastFixTop == 1) %>%
mean
meanT
meanT<- lookTBLong %>%
filter(lastFixTop == 1)
meanT
meanT<- lookTBLong %>%
filter(lastFixTop == 1) %>%
colmeans()
meanT<- lookTBLong %>%
filter(lastFixTop == 1) %>%
colMeans()
meanT
meanT<- lookTBLong %>%
filter(lastFixTop == 1) %>%
select(chose_top) %>%
mean
meanT<- lookTBLong %>%
filter(lastFixTop == 1) %>%
select(chose_top) %>%
colMeans()
meanT<- lookTBLong %>%
filter(lastFixTop == 1) %>%
dplyr::select(chose_top) %>%
mean()
#Replication sample
ggplot(dfET, aes(x=attInd, y=payneInd)) +
geom_point(size=2.5, alpha=.5)+
guides(alpha=FALSE)+ theme_bw()+xlim(-1,1)+
scale_colour_grey()+ylim(-1,1)+
theme(text=element_text(size=20))+
xlab("Attribute index") + ylab("Payne index")
correlationPlot(dfET, "attInd", "payneInd", 'Attribute Index', 'Payne Index', 'att_payne')
correlationPlot(dfET, "attInd", "payneInd", 'Attribute Index', 'Payne Index', 'att_payne')
correlationPlot <- function(data, xVar, yVar, xName, yName, plotName) {
data$xVar <- data[, xVar]
data$yVar <- data[, yVar]
ggplot(data, aes(x=xVar, y=yVar)) +
theme_bw()+xlim(-1,1)+ylim(-10,0) +
scale_colour_grey(start=.1, end=.6) +
scale_shape_manual(values=c(16,17)) +
theme(text=element_text(size=20), legend.position = "none") +
xlab(xName) +
ylab(yName)
ggsave(paste("plots/",  plotName, '.pdf'),width=5.7, height=5)
}
correlationPlot(dfET, "optInd", "logk", 'Option Index', 'Log(k)', 'Opt_logK')
names(dfET)
correlationPlot <- function(data, xVar, yVar, xName, yName) {
data$xVar <- data[, xVar]
data$yVar <- data[, yVar]
ggplot(data, aes(x=xVar, y=yVar)) +
theme_bw()+xlim(-1,1)+ylim(-10,0) +
scale_colour_grey(start=.1, end=.6) +
scale_shape_manual(values=c(16,17)) +
theme(text=element_text(size=20), legend.position = "none") +
xlab(xName) +
ylab(yName)
# ggsave(paste("plots/",  plotName, '.pdf'),width=5.7, height=5)
}
correlationPlot(dfET, "optInd", "logk", 'Option Index', 'Log(k)')
correlationPlot(dfET, "optInd", "logk", 'Option Index', 'Log(k)')
head(dfET)
correlationPlot(dfET, "optInd", "optInd", 'Option Index', 'Log(k)')
ggplot(dfET, aes(x=optInd, y=logk)) +
theme_bw()+xlim(-1,1)+ylim(-10,0) +
scale_colour_grey(start=.1, end=.6) +
scale_shape_manual(values=c(16,17)) +
theme(text=element_text(size=20), legend.position = "none") +
xlab(xName) +
ylab(yName)
ggplot(dfET, aes(x=optInd, y=logk)) +
theme_bw()+xlim(-1,1)+ylim(-10,0) +
scale_colour_grey(start=.1, end=.6) +
scale_shape_manual(values=c(16,17)) +
theme(text=element_text(size=20), legend.position = "none") +
xlab(xName) +
ylab(yName)
ggplot(dfET, aes(x=optInd, y=logk)) +
theme_bw()+xlim(-1,1)+ylim(-10,0) +
scale_colour_grey(start=.1, end=.6) +
scale_shape_manual(values=c(16,17)) +
theme(text=element_text(size=20), legend.position = "none") +
xlab('Option Index') +
ylab('Log(k)')
ggsave('plots/opt_logk.pdf',width=5.7, height=5)
ggplot(dfET, aes(x=optInd, y=logk)) +
theme_bw()+xlim(-1,1)+ylim(-10,0) +
scale_colour_grey(start=.1, end=.6) +
scale_shape_manual(values=c(16,17)) +
theme(text=element_text(size=20), legend.position = "none") +
xlab('Option Index') +
ylab('Log(k)')
#Replication sample
ggplot(dfET, aes(x=attInd, y=payneInd)) +
geom_point(size=2.5, alpha=.5)+
guides(alpha=FALSE)+ theme_bw()+xlim(-1,1)+
scale_colour_grey()+ylim(-1,1)+
theme(text=element_text(size=20))+
xlab("Attribute index") + ylab("Payne index")
ggsave("plots/att_payne.pdf",width=5.7, height=5)
correlationPlot(dfET, "attInd", "payneInd", 'Attribute Index', 'Payne Index', 'att_payne')
# correlationPlot <- function(data, xVar, yVar, xName, yName) {
#     data$xVar <- data[, xVar]
#     data$yVar <- data[, yVar]
#
#     ggplot(data, aes(x=xVar, y=yVar)) +
#         theme_bw()+xlim(-1,1)+ylim(-10,0) +
#         scale_colour_grey(start=.1, end=.6) +
#         scale_shape_manual(values=c(16,17)) +
#         theme(text=element_text(size=20), legend.position = "none") +
#         xlab(xName) +
#         ylab(yName)
# }
ggplot(dfET, aes(x=optInd, y=logk)) +
theme_bw()+xlim(-1,1)+ylim(-10,0) +
scale_colour_grey(start=.1, end=.6) +
scale_shape_manual(values=c(16,17)) +
theme(text=element_text(size=20), legend.position = "none") +
xlab('Option Index') +
ylab('Log(k)')
ggsave('plots/opt_logk.pdf',width=5.7, height=5)
cor.test(dfET$optInd,dfET$logk)
#Replication sample
ggplot(dfET, aes(x=attInd, y=payneInd)) +
geom_point(size=2.5, alpha=.5)+
guides(alpha=FALSE)+ theme_bw()+xlim(-1,1)+
scale_colour_grey()+ylim(-1,1)+
theme(text=element_text(size=20))+
xlab("Attribute index") + ylab("Payne index")
ggsave("plots/att_payne.pdf",width=5.7, height=5)
correlationPlot(dfET, "attInd", "payneInd", 'Attribute Index', 'Payne Index', 'att_payne')
#Replication sample
ggplot(dfET, aes(x=attInd, y=payneInd)) +
geom_point(size=2.5, alpha=.5)+
guides(alpha=FALSE)+ theme_bw()+xlim(-1,1)+
scale_colour_grey()+ylim(-1,1)+
theme(text=element_text(size=20))+
xlab("Attribute index") + ylab("Payne index")
ggsave("plots/att_payne.pdf",width=5.7, height=5)
cor.test(dfET$payneInd,dfET$attInd)
#Plot correlation between attribute index and discount rate (k-val)
ggplot(dfET, aes(x=attInd, y=logk)) +
geom_point(size=2.5, aes(alpha=.5, color=col, shape=col))+
guides(alpha=FALSE,color=FALSE, shape=FALSE)+
theme_bw()+xlim(-1,1)+
scale_colour_grey()+ylim(-10,0)+
theme(text=element_text(size=20))+
xlab("Attribute index") + ylab("log(k)")
ggsave("plots/logk_att.pdf",width=5.7, height=5)
cor.test(dfET$attInd,dfET$logk)
#Plot correlation between Payne index and discount rate
#Replication sample
ggplot(dfET2, aes(x=payneInd, y=logk)) +
geom_point(size=2.5, aes(alpha=.5, color=col, shape=col))+
guides(alpha=FALSE,color=FALSE, shape=FALSE)+
theme_bw()+xlim(-1,1)+
scale_colour_grey()+ylim(-10,0)+
theme(text=element_text(size=20))+
xlab("Payne index") +
ylab("log(k)")
#Plot correlation between Payne index and discount rate
#Replication sample
ggplot(dfET, aes(x=payneInd, y=logk)) +
geom_point(size=2.5, aes(alpha=.5, color=col, shape=col))+
guides(alpha=FALSE,color=FALSE, shape=FALSE)+
theme_bw()+xlim(-1,1)+
scale_colour_grey()+ylim(-10,0)+
theme(text=element_text(size=20))+
xlab("Payne index") +
ylab("log(k)")
ggsave("plots/logk_payne.pdf",width=5.7, height=5)
cor.test(dfET2$payneInd[indETpat2],dfET2$logk[indETpat2])
cor.test(dfET$payneInd,dfET$logk)
t.test(errorRT$value[errorRT$errCorr=="Error" & errorRT$labels=="SS>LLRT"], errorRT$value[errorRT$errCorr=="Correct" & errorRT$labels=="SS>LLRT"],paired=TRUE, na.action=na.pass) #SS>LL error vs. correct response time
t.test(errorRT$value[errorRT$errCorr=="Error" & errorRT$labels=="LL>SSRT"], errorRT$value[errorRT$errCorr=="Correct" & errorRT$labels=="LL>SSRT"],paired=TRUE, na.action=na.pass) #LL>SS error vs. correct response time
cohen.d(errorRT$value[errorRT$labels=="LL>SSRT"],errorRT$errCorr[errorRT$labels=="LL>SSRT"],pooled=TRUE,na.rm=TRUE, paired=TRUE) #Effect size for response time difference
ggplot(errorRT, aes(x=labels,y=value, fill=errCorr))+
geom_violin(alpha=.6, size=0,position=position_dodge(0))+
stat_summary(fun.data="mean_se",geom="linerange",aes(color=errCorr),alpha=1,size=1.5)+
stat_summary(fun.y=mean, geom="line",aes(group=errCorr, color=errCorr),size=1.5)+
geom_text(x=2, y=7.4, label="***",size=10)+ coord_cartesian(ylim=c(0,7.5))+
theme_bw()+theme(text=element_text(size=20))+
scale_x_discrete(labels=c("SS>LL", "LL>SS"))+
xlab("Choices")+ylab("Response Time (s)")+labs(fill="",color="")+
guides(size="none")+scale_colour_grey()+scale_fill_grey()
ggsave("plots/errRT2.pdf",width=6.5, height=5)
ggsave("plots/errRT.pdf",width=6.5, height=5)
#Response time error analysis
t.test(errorRT$value[errorRT$errCorr=="Error" & errorRT$labels=="SS>LLRT"], errorRT$value[errorRT$errCorr=="Correct" & errorRT$labels=="SS>LLRT"],paired=TRUE, na.action=na.pass) #SS>LL error vs. correct response time
t.test(errorRT$value[errorRT$errCorr=="Error" & errorRT$labels=="LL>SSRT"], errorRT$value[errorRT$errCorr=="Correct" & errorRT$labels=="LL>SSRT"],paired=TRUE, na.action=na.pass) #LL>SS error vs. correct response time
cohen.d(errorRT$value[errorRT$labels=="LL>SSRT"],errorRT$errCorr[errorRT$labels=="LL>SSRT"],pooled=TRUE,na.rm=TRUE, paired=TRUE) #Effect size for response time difference
ggplot(errorRT, aes(x=labels,y=value, fill=errCorr))+
geom_violin(alpha=.6, size=0,position=position_dodge(0))+
stat_summary(fun.data="mean_se",geom="linerange",aes(color=errCorr),alpha=1,size=1.5)+
stat_summary(fun.y=mean, geom="line",aes(group=errCorr, color=errCorr),size=1.5)+
geom_text(x=2, y=7.4, label="***",size=10)+ coord_cartesian(ylim=c(0,7.5))+
theme_bw()+theme(text=element_text(size=20))+
scale_x_discrete(labels=c("SS>LL", "LL>SS"))+
xlab("Choices")+ylab("Response Time (s)")+labs(fill="",color="")+
guides(size="none")+scale_colour_grey()+scale_fill_grey()
ggsave("plots/errRT.pdf",width=6.5, height=5)
#Option index analysis
#Replication sample
t.test(errorOI$value[errorOI$errCorr=="Error" & errorOI$labels=="SS>LLOI"], errorOI$value[errorOI$errCorr=="Correct" & errorOI$labels=="SS>LLOI"],paired=TRUE, na.action=na.pass) #SS>LL error vs. correct option index
cohen.d(errorOI$value[errorOI$labels=="SS>LLOI"],errorOI$errCorr[errorOI$labels=="SS>LLOI"],pooled=TRUE,na.rm=TRUE, paired=TRUE) #Effect size
t.test(errorOI$value[errorOI$errCorr=="Error" & errorOI$labels=="LL>SSOI"], errorOI$value[errorOI$errCorr=="Correct" & errorOI$labels=="LL>SSOI"],paired=TRUE, na.action=na.pass) #LL>SS error vs. correct option index
cohen.d(errorOI$value[errorOI$labels=="LL>SSOI"],errorOI$errCorr[errorOI$labels=="LL>SSOI"],pooled=TRUE,na.rm=TRUE, paired=TRUE)
ggplot(errorOI, aes(x=labels,y=value, fill=errCorr))+
geom_violin(alpha=.6, size=0,position=position_dodge(0))+
stat_summary(fun.data="mean_se",geom="linerange",aes(color=errCorr),alpha=1,size=1.5)+
stat_summary(fun.y=mean, geom="line",aes(group=errCorr, color=errCorr),size=1.5)+
geom_text(x=1, y=.9, label="***",size=10)+ geom_text(x=2, y=.9, label="***",size=10)+
coord_cartesian(ylim=c(-1,1))+ scale_colour_grey()+scale_fill_grey()+
theme_bw()+theme(text=element_text(size=20))+scale_x_discrete(labels=c("SS>LL", "LL>SS"))+ xlab("Choices")+ylab("Option Index")+
labs(fill="",color="")+guides(size="none")
ggsave("plots/errOI.pdf",width=6.5, height=5)
#Attribute index analysis
#Replication sample
t.test(errorAI$value[errorAI$errCorr=="Error" & errorAI$labels=="SS>LLAI"], errorAI$value[errorAI$errCorr=="Correct" & errorAI$labels=="SS>LLAI"],paired=TRUE, na.action=na.pass) #SS>LL error vs. correct attribute index
t.test(errorAI$value[errorAI$errCorr=="Error" & errorAI$labels=="LL>SSAI"], errorAI$value[errorAI$errCorr=="Correct" & errorAI$labels=="LL>SSAI"],paired=TRUE, na.action=na.pass) #LL>SS error vs. correct attribute index
#Payne index analysis
#Replication sample
t.test(errorPI2$value[errorPI2$errCorr=="Error" & errorPI2$labels=="SS>LLPI"], errorPI2$value[errorPI2$errCorr=="Correct" & errorPI2$labels=="SS>LLPI"],paired=TRUE, na.action=na.pass) #SS>LL error vs. correct Payne index
ggplot(errorRT, aes(x=labels,y=value, fill=errCorr))+
geom_violin(alpha=.6, size=0,position=position_dodge(0))+
stat_summary(fun.data="mean_se",geom="linerange",aes(color=errCorr),alpha=1,size=1.5)+
stat_summary(fun.y=mean, geom="line",aes(group=errCorr, color=errCorr),size=1.5)+
geom_text(x=2, y=7.4, label="***",size=10)+ coord_cartesian(ylim=c(0,7.5))+
theme_bw()+theme(text=element_text(size=20))+
scale_x_discrete(labels=c("SS>LL", "LL>SS"))+
xlab("Choices")+ylab("Response Time (s)")+labs(fill="",color="")+
guides(size="none")+scale_colour_grey()+scale_fill_grey()
#Replication sample
ggplot(data=choiceSide,aes(x=sideProp))+
geom_histogram(bins=15)+theme_bw()+xlab("Proportion Top Choices")+
theme(text=element_text(size=20))+xlim(0,1)
ggsave("plots/choiceSide.pdf",width=5.5, height=5)
choiceSide
colnames(choiceSide)<-c("run_id", "sideProp")
#Replication sample
ggplot(data=choiceSide,aes(x=sideProp))+
geom_histogram(bins=15)+theme_bw()+xlab("Proportion Top Choices")+
theme(text=element_text(size=20))+xlim(0,1)
ggsave("plots/choiceSide.pdf",width=5.5, height=5)
ggplot(errorRT, aes(x=labels,y=value, fill=errCorr))+
geom_violin(alpha=.6, size=0,position=position_dodge(0))+
stat_summary(fun.data="mean_se",geom="linerange",aes(color=errCorr),alpha=1,size=1.5)+
stat_summary(fun.y=mean, geom="line",aes(group=errCorr, color=errCorr),size=1.5)+
geom_text(x=2, y=7.4, label="***",size=10)+ coord_cartesian(ylim=c(0,7.5))+
theme_bw()+theme(text=element_text(size=20))+
scale_x_discrete(labels=c("SS>LL", "LL>SS"))+
xlab("Choices")+ylab("Response Time (s)")+labs(fill="",color="")+
guides(size="none")+scale_colour_grey()+scale_fill_grey()
ggplot(errorRT, aes(x=labels,y=value, fill=errCorr))+
geom_violin(alpha=.6, size=0,position=position_dodge(0))+
stat_summary(fun.data="mean_se",geom="linerange",aes(color=errCorr),alpha=1,size=1.5)+
stat_summary(fun.y=mean, geom="line",aes(group=errCorr, color=errCorr),size=1.5)+
geom_text(x=2, y=7.4, label="***",size=10)+ coord_cartesian(ylim=c(0,7.5))+
theme_bw()+theme(text=element_text(size=20))+
scale_x_discrete(labels=c("SS>LL", "LL>SS"))+
xlab("Choices")+ylab("Response Time (s)")+labs(fill="",color="")+
guides(size="none")+scale_colour_grey()+scale_fill_grey()
ggplot(errorRT, aes(x=labels,y=value, fill=errCorr))+
geom_violin(alpha=.6, size=0,position=position_dodge(0))+
stat_summary(fun.data="mean_se",geom="linerange",aes(color=errCorr),alpha=1,size=1.5)+
stat_summary(fun=mean, geom="line",aes(group=errCorr, color=errCorr),size=1.5)+
geom_text(x=2, y=7.4, label="***",size=10)+ coord_cartesian(ylim=c(0,7.5))+
theme_bw()+theme(text=element_text(size=20))+
scale_x_discrete(labels=c("SS>LL", "LL>SS"))+
xlab("Choices")+ylab("Response Time (s)")+labs(fill="",color="")+
guides(size="none")+scale_colour_grey()+scale_fill_grey()
View(errorRT)
setwd('C:/Users/User/Google Drive/Masterarbeit/Analysis')
setwd('C:/Users/User/GitHub/WebET_Analysis')
getPackages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
getPackages(c('dplyr',
"effsize",
"ggplot2",
"ggsignif",
'matlabr',
'QuantPsyc',
"RColorBrewer",
'reshape2',
'tidyr')
)
run_matlab_script('amasino_dataPrep/init.m')
setwd("C:/Users/User/Google Drive/Masterarbeit/Analysis/")
setwd("C:/Users/User/GitHub/WebET_Analysis")
# https://gist.github.com/stevenworthington/3178163
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(c("knitr",
"dplyr",
'readr',
"rsq",
'lme4',
"ICC",
'ggplot2',
'GGally',
'reshape2',
'lme4',
'compiler',
'parallel',
'boot',
'lattice',
"lmerTest", # Erhalte p-Werte
"tinytex")
)
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) # Show R markdown output as Integers
data_trial_choice <- read_csv('data_trial_choice.csv')
data_et_fix <- read_csv('data_rInput/data_et_fix.csv')
data_trial_fix <- read_csv('data_rInput/data_trial_fix.csv')
data_subject <- read_csv('data_rInput/data_subject.csv')
str(data_et_fix)
columns(data_trial_fix)
data_et_fix <- read_csv('data_rInput/data_et_fix.csv')
data_trial_fix <- read_csv('data_rInput/data_trial_fix.csv')
data_subject <- read_csv('data_rInput/data_subject.csv')
columns(data_trial_fix)
names(data_trial_fix)
data_plot = data_trial_fix %>%
select('run_id', 'chin', 'x_pos', 'y_pos', 'precision')
data_plot
is.na(data_plot)
length(data_plot)
nrow(data_plot)
na.omit(data_plot)
ggpairs(data_plot[, c('run_id', 'chin', 'x_pos', 'y_pos', 'precision')]) # Correlations
data_plot = data_trial_fix %>%
select('run_id', 'chin', 'x_pos', 'y_pos', 'precision')
data_plot = data_plot %>%
filter(!is.na('precision'))
nrow(data_plot)
data_plot = data_trial_fix %>%
select('run_id', 'chin', 'x_pos', 'y_pos', 'precision')
data_plot = data_plot %>%
filter(!is.na(precision))
nrow(data_plot)
data_trial_fix = data_trial_fix %>%
filter(!is.na(precision))
nrow(data_trial_fix)
ggpairs(data_trial_fix[, c('x_pos', 'y_pos', 'precision', 'offset')]) # Correlations
ggpairs(data_trial_fix[, c('x_pos', 'y_pos', 'precision', 'offset', 'fps')]) # Correlations
data_trial_fix$x_pos_c = scale(data_trial_fix$x_pos)
data_trial_fix$y_pos_c = scale(data_trial_fix$y_pos)
model <- glmer(offset ~ x_pos_c + y_pos_c + (1 | run_id),
data = data_trial_fix)
print(model, corr = FALSE)
summary(model)
confint(model, method="boot", n=50) # CI with Bootstrap does not need normality
m1 <- glmer(offset ~ x_pos_c + y_pos_c + chin + (1 | run_id),
data = data_trial_fix)
print(m1, corr = FALSE)
summary(m1)
confint(m1, method="boot", n=50) # CI with Bootstrap does not need normality
data_trial_fix$x_pos_c = scale(data_trial_fix$x_pos)
data_trial_fix$y_pos_c = scale(data_trial_fix$y_pos)
m_null <- lmer(offset ~ x_pos_c + y_pos_c + (1 | run_id),
data = data_trial_fix)
print(m_null, corr = FALSE)
summary(m_null)
data_trial_fix$x_pos_c = scale(data_trial_fix$x_pos)
data_trial_fix$y_pos_c = scale(data_trial_fix$y_pos)
m_null <- lmer(offset ~ x_pos_c + y_pos_c + (1 | run_id),
data = data_trial_fix)
# print(m_null, corr = FALSE)
summary(m_null)
m1 <- lmer(offset ~ x_pos_c + y_pos_c + chin + (1 | run_id),
data = data_trial_fix)
print(m1, corr = FALSE)
summary(m1)
confint(m1, method="boot", n=50) # CI with Bootstrap does not need normality
m1 <- lmer(offset ~ x_pos_c + y_pos_c + chin + (1 | run_id),
data = data_trial_fix)
# print(m1, corr = FALSE)
summary(m1)
confint(m1, method="boot", n=50) # CI with Bootstrap does not need normality
names(data_trial_fix)
m2 <- lmer(offset ~ x_pos_c + y_pos_c + withinTaskIndex + chin + (1 | run_id),
data = data_trial_fix)
# print(m1, corr = FALSE)
summary(m2)
confint(m2, method="boot", n=50) # CI with Bootstrap does not need normality
data_trial_fix$x_pos_c = scale(data_trial_fix$x_pos)
data_trial_fix$y_pos_c = scale(data_trial_fix$y_pos)
m_null <- lmer(offset ~ x_pos_c + y_pos_c + withinTaskIndex + (1 | run_id),
data = data_trial_fix)
# print(m_null, corr = FALSE)
summary(m_null)
names(data_trial_fix)
