subjects_pos_logK
grouped_NA_ET = data_trial %>%
filter(!is.na(fps)) %>%
group_by(run_id) %>%
dplyr::summarise(fps = mean(fps),
n_NA_OI = sum(is.na(optionIndex)),
n_NA_AI = sum(is.na(attributeIndex)),
n_NA_PI = sum(is.na(payneIndex))) %>%
arrange(n_NA_OI, n_NA_AI, n_NA_PI)
grouped_NA_ET
subjects_NA_OI = grouped_NA_ET %>%
filter(n_NA_OI>40) %>%
dplyr::pull(run_id)
subjects_NA_AI = grouped_NA_ET %>%
filter(n_NA_AI>40) %>%
dplyr::pull(run_id)
subjects_NA_PI = grouped_NA_ET %>%
filter(n_NA_PI>40) %>%
dplyr::pull(run_id)
excludeSubjects <- read.table('data_jupyter/excludeSubjects_choice.csv',
header=TRUE, sep=',')[, 1]
excludeSubjects = c(
excludeSubjects,
subjects_biasedChoices,
subjects_pos_logK,
subjects_noisy_logK,
subjects_missingLogK,
subjects_cannotSee) %>%
unique()
excludeSubjects
print(length(excludeSubjects))
generalCleaninng = function(data) {
data = data %>%
filter(
run_id < 1000 &
!(run_id %in% excludeSubjects)
)
}
data_subject = generalCleaninng(data_subject)
data_trial = generalCleaninng(data_trial)
data_et = generalCleaninng(data_et)
print(paste('Number of subjects: ', length(unique(data_trial$run_id))))
#Replication sample
ggplot(data_subject, aes(x=choseTop))+
geom_histogram(bins=15)+theme_bw()+xlab("Proportion Top Choices")+
theme(text=element_text(size=20))+xlim(0,1)
ggsave("plots/choiceSide.pdf",width=5.5, height=5)
ggplot(data_subject, aes(x=logK))+
geom_histogram(binwidth=.5, alpha=.5, position="identity")+
scale_fill_manual(values=c("palegreen","cornflowerblue"), name="") +
theme_bw()+theme(text=element_text(size=40))
ggsave("plots/logk_hist.pdf", width=5.5, height=5)
subjectiveValues = function(data) {
data$svLL = data$aLL / (1 + exp(data$logK) * data$tLL)
data$svSS = data$aSS / (1 + exp(data$logK) * data$tSS)
data$dSV_LLSS = data$svLL - data$svSS
data$svT = data$aT / (1+ exp(data$logK) * data$tT)
data$svB = data$aB / (1+ exp(data$logK) * data$tB)
data$dSV_TB = data$svT - data$svB
return(data)
}
data_trial = subjectiveValues(data_trial)
data_trial %>%
dplyr::select(run_id, aT, tT, svT, aB, tB, svB, dSV_TB, choseTop) %>%
mutate(across(c('svT', 'svB', 'dSV_TB'), round, 2)) %>%
arrange(dSV_TB)
data_trial$dSV_bin =
cut(data_trial$dSV_TB,
breaks = seq(-5, 5, 1),
labels = seq(-4.5, 4.5, 1),
include.lowest=TRUE) %>%
paste() %>%
as.numeric()
SV_bins = data_trial %>%
dplyr::group_by(run_id, dSV_bin) %>%
dplyr::summarise(
n=n(),
logK = mean(logK),
noise = mean(noise),
choseTop=mean(choseTop),
rt=mean(trial_duration_exact)/1000,
count=mean(x_count),
.groups = 'keep') %>%
filter(n>1) %>%
arrange(dSV_bin)
SV_bins
print(
paste(
'Remaining subjects: ',
SV_bins %>%
dplyr::pull(run_id) %>%
unique() %>%
length()
)
)
ggplot(data=SV_bins, aes(x=dSV_bin, y=choseTop)) +
theme_bw() +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) +
geom_line(stat="summary", fun="mean", size=.5)+
stat_summary(fun.data=mean_se, geom="errorbar", width=.8)+
xlab("SV top - SV bottom")+ylab("Proportion top choices")+
theme(text=element_text(size=20))+ylim(0,1)
ggsave("plots/SV_choseTop.pdf", width=5.5, height=5)
ggplot(data=SV_bins, aes(x=dSV_bin, y=rt)) +
theme_bw() +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) + ylim(0, 6.5) +
geom_line(stat="summary", fun="mean", size=.5) +
stat_summary(fun.data=mean_se, geom="errorbar", width=.8) +
xlab("SV top - SV bottom") +
ylab("Response Time (s)") +
theme(text=element_text(size=20))
ggsave("plots/SV_RT.pdf",width=5.5, height=5)
ggplot(data=SV_bins, aes(x=dSV_bin, y=n_fixations)) +
theme_bw() +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) + ylim(0,20) +
geom_line(stat="summary", fun="mean", size=.5) +
stat_summary(fun.data=mean_se, geom="errorbar", width=.8) +
xlab("SV top - SV bottom") +
ylab("Number of Fixations") +
theme(text=element_text(size=20))
SV_bins = data_trial %>%
dplyr::group_by(run_id, dSV_bin) %>%
dplyr::summarise(
n=n(),
logK = mean(logK),
noise = mean(noise),
choseTop=mean(choseTop),
rt=mean(trial_duration_exact)/1000,
n_fixations = mean(n_fixations),
count=mean(x_count),
.groups = 'keep') %>%
filter(n>1) %>%
arrange(dSV_bin)
data_trial$dSV_bin =
cut(data_trial$dSV_TB,
breaks = seq(-5, 5, 1),
labels = seq(-4.5, 4.5, 1),
include.lowest=TRUE) %>%
paste() %>%
as.numeric()
SV_bins = data_trial %>%
dplyr::group_by(run_id, dSV_bin) %>%
dplyr::summarise(
n=n(),
logK = mean(logK),
noise = mean(noise),
choseTop=mean(choseTop),
rt=mean(trial_duration_exact)/1000,
n_fixations = mean(n_fixations),
count=mean(x_count),
.groups = 'keep') %>%
filter(n>1) %>%
arrange(dSV_bin)
SV_bins
print(
paste(
'Remaining subjects: ',
SV_bins %>%
dplyr::pull(run_id) %>%
unique() %>%
length()
)
)
ggplot(data=SV_bins, aes(x=dSV_bin, y=choseTop)) +
theme_bw() +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) +
geom_line(stat="summary", fun="mean", size=.5)+
stat_summary(fun.data=mean_se, geom="errorbar", width=.8)+
xlab("SV top - SV bottom")+ylab("Proportion top choices")+
theme(text=element_text(size=20))+ylim(0,1)
ggsave("plots/SV_choseTop.pdf", width=5.5, height=5)
ggplot(data=SV_bins, aes(x=dSV_bin, y=rt)) +
theme_bw() +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) + ylim(0, 6.5) +
geom_line(stat="summary", fun="mean", size=.5) +
stat_summary(fun.data=mean_se, geom="errorbar", width=.8) +
xlab("SV top - SV bottom") +
ylab("Response Time (s)") +
theme(text=element_text(size=20))
ggsave("plots/SV_RT.pdf",width=5.5, height=5)
ggplot(data=SV_bins, aes(x=dSV_bin, y=n_fixations)) +
theme_bw() +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) + ylim(0,20) +
geom_line(stat="summary", fun="mean", size=.5) +
stat_summary(fun.data=mean_se, geom="errorbar", width=.8) +
xlab("SV top - SV bottom") +
ylab("Number of Fixations") +
theme(text=element_text(size=20))
ggsave("plots/SV_Count.pdf",width=5.5, height=5)
ggplot(data=SV_bins, aes(x=dSV_bin, y=n_fixations)) +
theme_bw() +
geom_line(color='grey',alpha=.2, aes(group=as.numeric(run_id))) +
xlim(-5,5) + ylim(0,10) +
geom_line(stat="summary", fun="mean", size=.5) +
stat_summary(fun.data=mean_se, geom="errorbar", width=.8) +
xlab("SV top - SV bottom") +
ylab("Number of Fixations") +
theme(text=element_text(size=20))
ggsave("plots/SV_Count.pdf",width=5.5, height=5)
setwd("C:/Users/User/GitHub/WebET_Analysis")
getPackages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
getPackages(c('plyr',
'dplyr',
"effsize",
'e1071',
"ggplot2",
"ggsignif",
'knitrProgressBar',
'matlabr',
'progress',
'QuantPsyc',
"RColorBrewer",
'reshape2',
'tidyr')
)
source("r_functions/geom_split_violin.R")
source("r_functions/merge_mean_by_subject.R")
data_subject <- read.table('data_jupyter/data_subject.csv',
header=TRUE, sep=',')
grouped_fixations = data_et %>%
group_by(run_id, withinTaskIndex) %>%
dplyr::summarise(
n_fixations = length(unique(fix_counter)),
.groups='keep'
)
setwd("C:/Users/User/GitHub/WebET_Analysis")
getPackages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
getPackages(c('plyr',
'dplyr',
"effsize",
'e1071',
"ggplot2",
"ggsignif",
'knitrProgressBar',
'matlabr',
'progress',
'QuantPsyc',
"RColorBrewer",
'reshape2',
'tidyr')
)
source("r_functions/geom_split_violin.R")
source("r_functions/merge_mean_by_subject.R")
data_subject <- read.table('data_jupyter/data_subject.csv',
header=TRUE, sep=',')
setwd("C:/Users/User/GitHub/WebET_Analysis")
getPackages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
getPackages(c(
'boot',
'broom',
'car',
'compiler',
'data.table',
'DHARMa',
"dplyr",
'GGally',
'ggplot2',
'HLMdiag',
'Hmisc',
'influence.ME',
"ICC",
"knitr",
'lme4',
'lattice',
'lme4',
"lmerTest", # Erhalte p-Werte
'nlme',
'parallel',
'readr',
'reshape',
'reshape2',
"rsq",
'tidyverse',
"tinytex"))
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999) # Show R markdown output as Integers
describe_datasets
data_et <- read_csv('data_jupyter/fix_task/data_et_fix.csv')
data_trial <- read_csv('data_jupyter/fix_task/data_trial_fix.csv')
data_subject <- read_csv('data_jupyter/fix_task/data_subject_fix.csv')
describe_datasets = data.frame(
names  = c("data_et", "data_trial", "data_subject"),
rows = c(
nrow(data_et),
nrow(data_trial),
nrow(data_subject)
),
subjects = c(
length(unique(data_et$run_id)),
length(unique(data_trial$run_id)),
length(unique(data_subject$run_id)),
)
)
describe_datasets = data.frame(
names  = c("data_et", "data_trial", "data_subject"),
rows = c(
nrow(data_et),
nrow(data_trial),
nrow(data_subject)
),
subjects = c(
length(unique(data_et$run_id)),
length(unique(data_trial$run_id)),
length(unique(data_subject$run_id))
)
)
describe_datasets
data_subject <- read.table('data_jupyter/choice_task/data_subject_choice.csv',
header=TRUE, sep=',')
setwd("C:/Users/User/GitHub/WebET_Analysis")
getPackages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
getPackages(c('plyr',
'dplyr',
"effsize",
'e1071',
"ggplot2",
"ggsignif",
'knitrProgressBar',
'matlabr',
'progress',
'QuantPsyc',
"RColorBrewer",
'reshape2',
'tidyr')
)
source("r_functions/geom_split_violin.R")
source("r_functions/merge_mean_by_subject.R")
data_subject <- read.table('data_jupyter/choice_task/data_subject_choice.csv',
header=TRUE, sep=',')
merge_by_subject = function(data, data_source, varName) {
if (varName %in% names(data)) {
data = data %>% dplyr::select(!varName)
}
data = merge(
data,
data_source %>% dplyr::select(run_id, varName),
by='run_id')
return(data)
}
data_trial = data_trial %>%
merge_by_subject(data_subject, 'glasses_binary')
data_et <- read_csv('data_jupyter/fix_task/data_et_fix.csv')
data_trial <- read_csv('data_jupyter/fix_task/data_trial_fix.csv')
data_subject <- read_csv('data_jupyter/fix_task/data_subject_fix.csv')
describe_datasets = data.frame(
names  = c("data_et", "data_trial", "data_subject"),
rows = c(
nrow(data_et),
nrow(data_trial),
nrow(data_subject)
),
subjects = c(
length(unique(data_et$run_id)),
length(unique(data_trial$run_id)),
length(unique(data_subject$run_id))
)
)
describe_datasets
predictors = c('withinTaskIndex', 'window_diagonal',
'x_pos', 'y_pos', 'fps',
'glasses_binary', 'chin')
ggpairs(data_trial[, append(predictors, c('precision', 'offset'))],
progress=F) # Correlations
ggpairs(data_trial %>%
dpylr::select(
'withinTaskIndex', 'window_diagonal', 'age', 'fps',
'precision', 'offset'
),
progress=F) # Correlations
ggpairs(data_trial %>%
dplyr::select(
'x_pos', 'y_pos', 'glasses_binary', 'chin',
'precision', 'offset'),
progress=F) # Correlations
ggpairs(data_trial %>%
dplyr::select(
'withinTaskIndex', 'window_diagonal', 'age', 'fps',
'precision', 'offset'
),
progress=F) # Correlations
data_trial =
ggpairs(data_trial %>%
merge(
data_subject %>% dplyr::select('run_id', 'age'),
by='run_id') %>%
dplyr::select(
'withinTaskIndex', 'window_diagonal', 'age', 'fps',
'precision', 'offset'
),
progress=F) # Correlations
data_trial =
ggpairs(data_trial %>%
merge(
data_subject %>% dplyr::select('run_id', 'age'),
by='run_id') %>%
dplyr::select(
'withinTaskIndex', 'window_diagonal', 'age', 'fps',
'precision', 'offset'
),
progress=F) # Correlations
ggpairs(data_trial %>%
merge(
data_subject %>% dplyr::select('run_id', 'age'),
by='run_id') %>%
dplyr::select(
'withinTaskIndex', 'window_diagonal', 'age', 'fps',
'precision', 'offset'
),
progress=F) # Correlations
ggpairs(data_trial %>%
merge(
data_subject %>% dplyr::select('run_id', 'age'),
by='run_id') %>%
dplyr::select(
'withinTaskIndex', 'window_diagonal', 'age', 'fps',
'precision', 'offset'
),
progress=F) # Correlations
data_subject %>% dplyr::select('run_id', 'age')
data_trial %>%
merge(
data_subject %>% dplyr::select('run_id', 'age'),
by='run_id')
merge(
data_trial
data_subject %>% dplyr::select('run_id', 'age'),
merge(
data_trial,
data_subject %>% dplyr::select('run_id', 'age'),
by='run_id')
merge(
data_trial,
data_subject %>% dplyr::select('run_id', 'age'),
by='run_id')
data_subject %>% dplyr::select('run_id', 'age')
merge(data_trial, data_subject %>% dplyr::select('run_id', 'age'), by='run_id')
merge(data_trial, test, by='run_id')
data_trial
data_trial
data_et <- read_csv('data_jupyter/fix_task/data_et_fix.csv')
data_trial <- read_csv('data_jupyter/fix_task/data_trial_fix.csv')
data_subject <- read_csv('data_jupyter/fix_task/data_subject_fix.csv')
describe_datasets = data.frame(
names  = c("data_et", "data_trial", "data_subject"),
rows = c(
nrow(data_et),
nrow(data_trial),
nrow(data_subject)
),
subjects = c(
length(unique(data_et$run_id)),
length(unique(data_trial$run_id)),
length(unique(data_subject$run_id))
)
)
describe_datasets
merge(data_trial, data_subject %>% dplyr::select('run_id', 'age'), by='run_id')
ggpairs(data_trial %>%
merge(
data_subject %>% dplyr::select('run_id', 'age'),
by='run_id') %>%
dplyr::select(
'withinTaskIndex', 'window_diagonal', 'age', 'fps',
'precision', 'offset'
),
progress=F) # Correlations
ggpairs(data_trial %>%
merge(
data_subject %>% dplyr::select('run_id', 'age'),
by='run_id') %>%
dplyr::select(
'withinTaskIndex', 'window_diagonal', 'age', 'fps',
'precision', 'offset'
),
progress=F) # Correlations
ggpairs(data_trial %>%
dplyr::select(
'x_pos', 'y_pos', 'glasses_binary', 'chin',
'precision', 'offset'),
progress=F) # Correlations
data_subject <- read.table('data_jupyter/choice_task/data_subject_choice.csv',
header=TRUE, sep=',')
data_subject <- read.table('data_jupyter/choice_task/data_subject.csv',
header=TRUE, sep=',')
data_subject <- read.table('data_jupyter/choice_task/data_subject.csv',
header=TRUE, sep=',')
